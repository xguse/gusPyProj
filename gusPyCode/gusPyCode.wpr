#!wing
#!version=3.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.directory-list = [{'dirloc': loc('.'),
                        'excludes': (),
                        'filter': '*',
                        'include_hidden': 0,
                        'recursive': 1,
                        'watch_for_changes': 1},
                       {'dirloc': loc('../../../MBGB/Rotations/James/Data'),
                        'excludes': (),
                        'filter': '*',
                        'include_hidden': 0,
                        'recursive': 1,
                        'watch_for_changes': 1},
                       {'dirloc': loc('orthologPrep'),
                        'excludes': (),
                        'filter': '*',
                        'include_hidden': False,
                        'recursive': True,
                        'watch_for_changes': True},
                       {'dirloc': loc('timeItScripts'),
                        'excludes': (),
                        'filter': '*',
                        'include_hidden': False,
                        'recursive': True,
                        'watch_for_changes': True}]
proj.file-type = 'normal'
[user attributes]
guimgr.visual-state = {loc('../../../../../../Applications/WingIDE.app/Contents/MacOS/resources/builtin-pi-files/2.5/__builtin__.pi'): {''\
        'attrib-starts': [],
        'first-line': 981,
        'folded-linenos': [],
        'sel-line': 989,
        'sel-line-start': 30728,
        'selection_end': 30738,
        'selection_start': 30734},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/copy.py'): {''\
        'attrib-starts': [('_keep_alive',
                           259)],
        'first-line': 255,
        'folded-linenos': [],
        'sel-line': 269,
        'sel-line-start': 7192,
        'selection_end': 7192,
        'selection_start': 7192},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/getopt.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/glob.py'): {''\
        'attrib-starts': [('glob',
                           8)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 99,
        'selection_end': 107,
        'selection_start': 103},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/inspect.py'): {''\
        'attrib-starts': [('getfile',
                           341)],
        'first-line': 308,
        'folded-linenos': [],
        'sel-line': 362,
        'sel-line-start': 14421,
        'selection_end': 14421,
        'selection_start': 14421},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/optparse.py'): {''\
        'attrib-starts': [('OptionParser',
                           1111),
                          ('OptionParser.__init__',
                           1178)],
        'first-line': 1175,
        'folded-linenos': [],
        'sel-line': 1189,
        'sel-line-start': 42590,
        'selection_end': 42590,
        'selection_start': 42590},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/posixpath.py'): {''\
        'attrib-starts': [('exists',
                           167)],
        'first-line': 160,
        'folded-linenos': [],
        'sel-line': 173,
        'sel-line-start': 5187,
        'selection_end': 5187,
        'selection_start': 5187},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/random.py'): {''\
        'attrib-starts': [('Random',
                           68),
                          ('Random.choice',
                           245)],
        'first-line': 239,
        'folded-linenos': [],
        'sel-line': 247,
        'sel-line-start': 9083,
        'selection_end': 9083,
        'selection_start': 9083},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py'): {''\
        'attrib-starts': [('compile',
                           177)],
        'first-line': 170,
        'folded-linenos': [],
        'sel-line': 179,
        'sel-line-start': 8325,
        'selection_end': 8325,
        'selection_start': 8325},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/sets.py'): {''\
        'attrib-starts': [('ImmutableSet',
                           392),
                          ('ImmutableSet.__hash__',
                           406)],
        'first-line': 392,
        'sel-line': 407,
        'sel-line-start': 14243,
        'selection_end': 14243,
        'selection_start': 14243},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/Clustering/MotifCompare.py'): {''\
        'attrib-starts': [('minshortestoverhangdiff',
                           363)],
        'first-line': 355,
        'folded-linenos': [],
        'sel-line': 363,
        'sel-line-start': 11908,
        'selection_end': 11980,
        'selection_start': 11940},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/Clustering/UPGMA.py'): {''\
        'attrib-starts': [('UPGMA',
                           73)],
        'first-line': 83,
        'folded-linenos': [],
        'sel-line': 73,
        'sel-line-start': 2194,
        'selection_end': 2203,
        'selection_start': 2198},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MD/AlignAce.py'): {''\
        'attrib-starts': [('MetaAce',
                           160)],
        'first-line': 150,
        'folded-linenos': [],
        'sel-line': 162,
        'sel-line-start': 6034,
        'selection_end': 6118,
        'selection_start': 6112},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MD/MDscan.py'): {''\
        'attrib-starts': [('MDscan',
                           104),
                          ('MDscan._execute',
                           129)],
        'first-line': 110,
        'folded-linenos': [],
        'sel-line': 139,
        'sel-line-start': 4670,
        'selection_end': 4670,
        'selection_start': 4670},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MD/MDsupport.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 175,
        'selection_end': 175,
        'selection_start': 175},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MD/Meme.py'): {''\
        'attrib-starts': [('Meme',
                           64),
                          ('Meme._parse',
                           122)],
        'first-line': 153,
        'folded-linenos': [],
        'sel-line': 166,
        'sel-line-start': 6527,
        'selection_end': 6552,
        'selection_start': 6547},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MD/__init__.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MotifMetrics.py'): {''\
        'attrib-starts': [('top_nmers_seqs',
                           1621)],
        'first-line': 1614,
        'folded-linenos': [],
        'sel-line': 1621,
        'sel-line-start': 65958,
        'selection_end': 66422,
        'selection_start': 65958},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MotifTools.py'): {''\
        'attrib-starts': [('submotif',
                           1667)],
        'first-line': 1693,
        'folded-linenos': [],
        'sel-line': 1703,
        'sel-line-start': 60056,
        'selection_end': 60056,
        'selection_start': 60056},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/paths.py'): {''\
        'attrib-starts': [('CHECK',
                           128)],
        'first-line': 119,
        'folded-linenos': [],
        'sel-line': 133,
        'sel-line-start': 4482,
        'selection_end': 4482,
        'selection_start': 4482},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/seq/Background.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 85,
        'selection_end': 142,
        'selection_start': 142},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/seq/FakeFasta.py'): {''\
        'attrib-starts': [('random_seqs',
                           44)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 44,
        'sel-line-start': 1225,
        'selection_end': 1240,
        'selection_start': 1229},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/seq/Fasta.py'): {''\
        'attrib-starts': [('fasta2dict',
                           83)],
        'first-line': 82,
        'folded-linenos': [],
        'sel-line': 91,
        'sel-line-start': 2813,
        'selection_end': 2813,
        'selection_start': 2813},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/seq/__init__.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/util/Arith.py'): {''\
        'attrib-starts': [('fact',
                           7)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 13,
        'sel-line-start': 232,
        'selection_end': 253,
        'selection_start': 253},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/numpy/lib/function_base.py'): {''\
        'attrib-starts': [('_get_nargs',
                           1756)],
        'first-line': 1747,
        'folded-linenos': [],
        'sel-line': 1756,
        'sel-line-start': 53153,
        'selection_end': 53153,
        'selection_start': 53153},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/pp.py'): {''\
        'attrib-starts': [('Server',
                           234),
                          ('Server.submit',
                           331)],
        'first-line': 353,
        'folded-linenos': [],
        'sel-line': 367,
        'sel-line-start': 13428,
        'selection_end': 13428,
        'selection_start': 13428},
                       loc('../../../../../../System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/optparse.py'): {''\
        'attrib-starts': [('OptionContainer',
                           893),
                          ('OptionContainer.set_conflict_handler',
                           952)],
        'first-line': 1080,
        'sel-line': 955,
        'sel-line-start': 34085,
        'selection_end': 34085,
        'selection_start': 34085},
                       loc('../../../../../../System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py'): {''\
        'attrib-starts': [('compile',
                           177)],
        'first-line': 168,
        'sel-line': 179,
        'sel-line-start': 8325,
        'selection_end': 8325,
        'selection_start': 8325},
                       loc('../../../../../../System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/sets.py'): {''\
        'attrib-starts': [('BaseSet',
                           82),
                          ('BaseSet._update',
                           355)],
        'first-line': 82,
        'sel-line': 378,
        'sel-line-start': 13307,
        'selection_end': 13307,
        'selection_start': 13307},
                       loc('../../../../../../System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/string.py'): {''\
        'attrib-starts': [('strip',
                           245)],
        'first-line': 233,
        'sel-line': 254,
        'sel-line-start': 8345,
        'selection_end': 8345,
        'selection_start': 8345},
                       loc('../../../../.wingpersonal3/pi-cache/2.5/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-dynload/cPickle.pi'): {''\
        'attrib-starts': [],
        'first-line': 52,
        'folded-linenos': [],
        'sel-line': 59,
        'sel-line-start': 1574,
        'selection_end': 1582,
        'selection_start': 1578},
                       loc('../../../../.wingpersonal3/pi-cache/2.5/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gmpy.pi'): {''\
        'attrib-starts': [],
        'first-line': 382,
        'folded-linenos': [],
        'sel-line': 388,
        'sel-line-start': 12294,
        'selection_end': 12300,
        'selection_start': 12300},
                       loc('../../../MBGB/Rotations/James/Data/Sequence/Anopheles/anophCodingCoords.txt'): {''\
        'attrib-starts': [],
        'first-line': 24351,
        'sel-line': 24406,
        'sel-line-start': 1515754,
        'selection_end': 1515803,
        'selection_start': 1515803},
                       loc('../../../MBGB/Rotations/James/Data/Sequence/Anopheles/codingBoundsTestInPut.txt'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 1059,
        'selection_start': 0},
                       loc('../../../MBGB/Rotations/James/Data/Sequence/Combo/affy-TISSUE_expression_filter.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'sel-line': 24,
        'sel-line-start': 660,
        'selection_end': 692,
        'selection_start': 692},
                       loc('!simpleScripts/checkJudysDB.py'): {'attrib-start'\
        's': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 28,
        'selection_end': 126,
        'selection_start': 126},
                       loc('!simpleScripts/compareMotility2TAMO.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 147,
        'selection_end': 147,
        'selection_start': 147},
                       loc('!simpleScripts/gcContentOfFastas.py'): {'attrib-'\
        'starts': [('calcStats',
                    7)],
        'first-line': 8,
        'folded-linenos': [],
        'sel-line': 60,
        'sel-line-start': 1335,
        'selection_end': 1352,
        'selection_start': 1352},
                       loc('!simpleScripts/geneList2Fasta.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 3,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 286,
        'selection_end': 383,
        'selection_start': 383},
                       loc('!simpleScripts/getKmersInAllSeqs.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 37,
        'sel-line-start': 956,
        'selection_end': 956,
        'selection_start': 956},
                       loc('!simpleScripts/higherOrderGenomeOne2OneOrthologies.py'): {''\
        'attrib-starts': [('forNgenomes',
                           4)],
        'first-line': 7,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 315,
        'selection_end': 321,
        'selection_start': 321},
                       loc('!simpleScripts/interrogatePickles.py'): {'attrib'\
        '-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 177,
        'selection_end': 177,
        'selection_start': 177},
                       loc('!simpleScripts/listOfProbSets2DougsGenes.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 119,
        'selection_start': 119},
                       loc('!simpleScripts/motifHitMatrix4clusterTest.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 540,
        'selection_end': 540,
        'selection_start': 540},
                       loc('!simpleScripts/parseMegyDBdump.py'): {'attrib-st'\
        'arts': [('megyFeatures',
                  33),
                 ('megyFeatures._parseFtrStr',
                  50)],
        'first-line': 65,
        'folded-linenos': [],
        'sel-line': 53,
        'sel-line-start': 1817,
        'selection_end': 1825,
        'selection_start': 1825},
                       loc('!simpleScripts/randomSplitFasta.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 261,
        'selection_end': 372,
        'selection_start': 372},
                       loc('!simpleScripts/randomizeProbset.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 27,
        'selection_end': 27,
        'selection_start': 27},
                       loc('!simpleScripts/scanSeqs4Motifs.py'): {'attrib-st'\
        'arts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 197,
        'selection_end': 279,
        'selection_start': 279},
                       loc('!simpleScripts/seedHitsFromMDOS.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('!simpleScripts/selectFastas_tamo.py'): {'attrib-'\
        'starts': [],
        'first-line': 1,
        'folded-linenos': [],
        'sel-line': 51,
        'sel-line-start': 1812,
        'selection_end': 1812,
        'selection_start': 1812},
                       loc('!simpleScripts/tabulate_miRNAseeds.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('!simpleScripts/testMLE.py'): {'attrib-starts': [(''\
        'f',
        2)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 11,
        'sel-line-start': 139,
        'selection_end': 160,
        'selection_start': 160},
                       loc('!simpleScripts/testOverlapRegEx.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 81,
        'selection_end': 94,
        'selection_start': 94},
                       loc('!simpleScripts/testScripts/testBioBlastNCBIXML.py'): {''\
        'attrib-starts': [],
        'first-line': 4,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 278,
        'selection_end': 278,
        'selection_start': 278},
                       loc('!simpleScripts/testTAMObackground.py'): {'attrib'\
        '-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 33,
        'selection_end': 33,
        'selection_start': 33},
                       loc('!simpleScripts/timeMeme.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 223,
        'selection_start': 0},
                       loc('!simpleScripts/tranposeData.py'): {'attrib-start'\
        's': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 13,
        'sel-line-start': 536,
        'selection_end': 554,
        'selection_start': 554},
                       loc('!simpleScripts/whichSeqsHaveEachKmer.py'): {'att'\
        'rib-starts': [],
        'first-line': 17,
        'folded-linenos': [],
        'sel-line': 32,
        'sel-line-start': 1018,
        'selection_end': 1018,
        'selection_start': 1018},
                       loc('.codingBounds.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('0_prototyping/GEMSlikePWM.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('0_prototyping/addRvCmpNumbers4Doug.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 146,
        'selection_end': 147,
        'selection_start': 147},
                       loc('0_prototyping/dougFastaLooper.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 25,
        'folded-linenos': [],
        'sel-line': 44,
        'sel-line-start': 1085,
        'selection_end': 1092,
        'selection_start': 1092},
                       loc('0_prototyping/groupKeysByIntersect.py'): {'attri'\
        'b-starts': [],
        'first-line': 1,
        'folded-linenos': [],
        'sel-line': 25,
        'sel-line-start': 617,
        'selection_end': 630,
        'selection_start': 630},
                       loc('0_prototyping/testDefOrder.py'): {'attrib-starts': [(''\
        'defB',
        4)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 125,
        'selection_end': 141,
        'selection_start': 141},
                       loc('0_prototyping/test_statusBar.py'): {'attrib-star'\
        'ts': [('statusBar',
                2)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 19,
        'sel-line-start': 530,
        'selection_end': 534,
        'selection_start': 534},
                       loc('0_prototyping/testingSciPyHypergeo.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 638,
        'selection_end': 638,
        'selection_start': 638},
                       loc('0_prototyping/testing_zip.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 83,
        'selection_end': 114,
        'selection_start': 114},
                       loc('0_prototyping/timeBinomialFuncs.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 141,
        'selection_end': 141,
        'selection_start': 141},
                       loc('BackUpFiles/JamesDefs.041508.py'): {'attrib-star'\
        'ts': [('groupByField',
                0)],
        'first-line': 0,
        'sel-line': 17,
        'sel-line-start': 578,
        'selection_end': 582,
        'selection_start': 582},
                       loc('BackUpFiles/fjoinConfilctResolver.bak2.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 23,
        'sel-line': 67,
        'sel-line-start': 2842,
        'selection_end': 2863,
        'selection_start': 2863},
                       loc('BackUpFiles/fjoinConfilctResolverV2.041708.py'): {''\
        'attrib-starts': [('resolver',
                           5)],
        'first-line': 0,
        'sel-line': 8,
        'sel-line-start': 177,
        'selection_end': 191,
        'selection_start': 191},
                       loc('BloodFly/BF_BasicSearch.py'): {'attrib-starts': [(''\
        'findMatchesInFastaDB',
        4)],
        'first-line': 0,
        'sel-line': 27,
        'sel-line-start': 709,
        'selection_end': 1247,
        'selection_start': 709},
                       loc('CRMsTakeTwo/hypergeoPvals4motifPairs.py'): {'att'\
        'rib-starts': [],
        'first-line': 18,
        'folded-linenos': [],
        'sel-line': 25,
        'sel-line-start': 1972,
        'selection_end': 2035,
        'selection_start': 1972},
                       loc('Collapse3wayOrthoList.py'): {'attrib-starts': [(''\
        'extractAndCompress',
        14)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 56,
        'sel-line-start': 1716,
        'selection_end': 1806,
        'selection_start': 1716},
                       loc('DealingWithTabedFiles/calcCoordsForAaCorePromoter.py'): {''\
        'attrib-starts': [('calcCoords',
                           11)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 13,
        'sel-line-start': 402,
        'selection_end': 510,
        'selection_start': 510},
                       loc('Doug/AAEL_1000bp_upstream_promoters.txt'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Doug/AAEL_1000bp_upstream_promotersNoNegs.txt'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Doug/AAEL_exon_genomic_coords.txt'): {'attrib-st'\
        'arts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Doug/conflicted1344.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Doug/conflicted1344xTest.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Doug/conflictedBOTH.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Doug/conflictedPOS.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Doug/fasta.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Doug/iupac2regex.py'): {'attrib-starts': [('iupa'\
        'c2regex',
        43)],
        'first-line': 6,
        'sel-line': 43,
        'sel-line-start': 581,
        'selection_end': 966,
        'selection_start': 581},
                       loc('EmptyScript.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 66,
        'selection_end': 666,
        'selection_start': 66},
                       loc('FilterLinesOnRegEx.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 399,
        'selection_end': 399,
        'selection_start': 399},
                       loc('JamesDefs.py'): {'attrib-starts': [('groupByFiel'\
        'd',
        0)],
        'first-line': 0,
        'sel-line': 23,
        'sel-line-start': 775,
        'selection_end': 827,
        'selection_start': 827},
                       loc('LearningTAMO/2KBupTSS_goodAffyAGAPsFastasOUT.masked.nr.fas.pickle.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 219,
        'selection_end': 318,
        'selection_start': 253},
                       loc('LearningTAMO/clusteringMotifs.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 28,
        'sel-line-start': 1058,
        'selection_end': 1084,
        'selection_start': 1084},
                       loc('LearningTAMO/jasparFiles2TamoFile.py'): {'attrib'\
        '-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 119,
        'selection_end': 218,
        'selection_start': 132},
                       loc('LearningTAMO/jasparFiles2mopatFormat.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 1049,
        'selection_start': 0},
                       loc('LearningTAMO/metaAceMultiCluster.py'): {'attrib-'\
        'starts': [],
        'first-line': 11,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('LearningTAMO/motifToolsSum.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 218,
        'selection_end': 218,
        'selection_start': 218},
                       loc('LearningTAMO/randomizing.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('LearningTAMO/runCombo.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 1,
        'selection_start': 1},
                       loc('LearningTAMO/runMetaAce.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 134,
        'selection_end': 139,
        'selection_start': 139},
                       loc('LearningTAMO/runningAlignAce.py'): {'attrib-star'\
        'ts': [],
        'first-line': 4,
        'folded-linenos': [],
        'sel-line': 13,
        'sel-line-start': 468,
        'selection_end': 598,
        'selection_start': 484},
                       loc('LearningTAMO/runningMotifMetrics.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 276,
        'selection_end': 353,
        'selection_start': 288},
                       loc('LearningTAMO/tamoMotifs2mopatFormat.py'): {'attr'\
        'ib-starts': [],
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 16,
        'sel-line-start': 1655,
        'selection_end': 1835,
        'selection_start': 1655},
                       loc('LearningTAMO/testBasic.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 5,
        'selection_start': 5},
                       loc('MDAP/MDAPbase.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/GEMSlikePWM.py'): {'attrib-starts': [],
        'first-line': 64,
        'folded-linenos': [],
        'sel-line': 98,
        'sel-line-start': 3803,
        'selection_end': 3863,
        'selection_start': 3863},
                       loc('MDAP_proj/MDAP.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 212,
        'selection_end': 233,
        'selection_start': 233},
                       loc('MDAP_proj/MDAP_SupportDir/1stTry_2KBupTSS_goodAffyAGAPsFastasOUT.masked.nr.fas.freq'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/MDAP_SupportDir/2KBupTSS_goodAffyAGAPsFastasOUT.masked.nr.fas.freq'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/MDAP_SupportDir/motifsToTestGEMS.txt'): {''\
        'attrib-starts': [],
        'first-line': 315,
        'folded-linenos': [],
        'sel-line': 359,
        'sel-line-start': 6427,
        'selection_end': 6443,
        'selection_start': 6443},
                       loc('MDAP_proj/MDAP_defs.py'): {'attrib-starts': [('a'\
        'lignAndCombineMotifs',
        41)],
        'first-line': 44,
        'folded-linenos': [],
        'sel-line': 49,
        'sel-line-start': 1453,
        'selection_end': 1468,
        'selection_start': 1468},
                       loc('MDAP_proj/MD_Programs.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/MD_wrappers.py'): {'attrib-starts': [(''\
        'TamoWrap',
        196),
        ('TamoWrap.go',
         231)],
        'first-line': 251,
        'folded-linenos': [],
        'sel-line': 299,
        'sel-line-start': 13469,
        'selection_end': 13615,
        'selection_start': 13615},
                       loc('MDAP_proj/MarkovBackground.py'): {'attrib-starts': [(''\
        'main',
        17)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 40,
        'sel-line-start': 1264,
        'selection_end': 1417,
        'selection_start': 1417},
                       loc('MDAP_proj/MemeBackground.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/analyzeFromOneTAMOpickle.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 37,
        'sel-line-start': 1309,
        'selection_end': 1373,
        'selection_start': 1373},
                       loc('MDAP_proj/analyzeFromTAMOpickles.py'): {'attrib-'\
        'starts': [],
        'first-line': 13,
        'folded-linenos': [],
        'sel-line': 43,
        'sel-line-start': 1548,
        'selection_end': 1616,
        'selection_start': 1606},
                       loc('MDAP_proj/changing_AlignSimMotifs.py'): {'attrib'\
        '-starts': [('alignSimilarMotifs',
                     5)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 143,
        'selection_end': 2108,
        'selection_start': 143},
                       loc('MDAP_proj/getRandPromoters.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 206,
        'selection_end': 274,
        'selection_start': 274},
                       loc('MDAP_proj/md2tamo.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/tempFastaOfCoRegSeqs.MDAP.Fri_Feb_27_11:58:01_2009.fas'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/tempFastaOfCoRegSeqs.MDAP.Fri_Feb_27_12:02:32_2009.fas'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/tempFastaOfCoRegSeqs.MDAP.Fri_Feb_27_12:02:58_2009.fas'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/tempFastaOfCoRegSeqs.MDAP.Fri_Feb_27_12:03:49_2009.fas'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/tempFastaOfCoRegSeqs.MDAP.Fri_Feb_27_17:04:07_2009.fas'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 16,
        'sel-line-start': 1002,
        'selection_end': 1067,
        'selection_start': 1067},
                       loc('MDAP_proj/tempFastaOfCoRegSeqs.MDAP.Fri_Feb_27_22:02:15_2009.fas'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/testAlignAce.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 16,
        'sel-line-start': 576,
        'selection_end': 664,
        'selection_start': 590},
                       loc('MDAP_proj/testBasic.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 204,
        'selection_end': 330,
        'selection_start': 219},
                       loc('MDAP_proj/testMeme.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 24,
        'sel-line-start': 798,
        'selection_end': 798,
        'selection_start': 798},
                       loc('MDAP_proj/test_AlignAce.py'): {'attrib-starts': [],
        'first-line': 4,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test_Basic.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 204,
        'selection_end': 285,
        'selection_start': 219},
                       loc('MDAP_proj/test_BasicCtrl_RandClust.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 25,
        'selection_start': 17},
                       loc('MDAP_proj/test_BasicMulti.py'): {'attrib-starts': [],
        'first-line': 17,
        'folded-linenos': [],
        'sel-line': 29,
        'sel-line-start': 937,
        'selection_end': 941,
        'selection_start': 941},
                       loc('MDAP_proj/test_Meme.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 703,
        'selection_end': 708,
        'selection_start': 703},
                       loc('MDAP_proj/test_alignAndCombine.py'): {'attrib-st'\
        'arts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 12,
        'sel-line-start': 507,
        'selection_end': 519,
        'selection_start': 519},
                       loc('MDAP_proj/test_findBestPairAlignments.py'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 14,
        'sel-line-start': 379,
        'selection_end': 379,
        'selection_start': 379},
                       loc('MDAP_proj/test_loadMotifsFromOutfile.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test_runMDAP.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test_shuffleSeqDict.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 222,
        'selection_end': 350,
        'selection_start': 350},
                       loc('MDAP_proj/test_transFac2tamo.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 224,
        'selection_end': 351,
        'selection_start': 351},
                       loc('MDAP_proj/writeRandClustFiles.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 120,
        'selection_end': 228,
        'selection_start': 228},
                       loc('MDOSX_proj/MDOSX.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 13,
        'sel-line-start': 90,
        'selection_end': 94,
        'selection_start': 94},
                       loc('MDOSX_proj/MDOSX_classes.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDOSX_proj/MDOSX_defs.py'): {'attrib-starts': [(''\
        'buildCoRegdOrthos',
        0)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 3408,
        'selection_start': 0},
                       loc('MDOSX_proj/MDOSX_defs/MDOSX_classes.py'): {'attr'\
        'ib-starts': [('OrthoGroup',
                       3),
                      ('OrthoGroup.__init__',
                       13)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 15,
        'sel-line-start': 344,
        'selection_end': 352,
        'selection_start': 352},
                       loc('MDOSX_proj/MDOSX_defs/__init__.py'): {'attrib-st'\
        'arts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDOSX_proj/MDOSX_defs/defs.py'): {'attrib-starts': [(''\
        'spawnOrthoGroups',
        25)],
        'first-line': 17,
        'folded-linenos': [],
        'sel-line': 25,
        'sel-line-start': 618,
        'selection_end': 638,
        'selection_start': 622},
                       loc('MDOSX_proj/mdosxClasses.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDOSX_proj/testData/test_Aa2Ag.txt'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDOSX_proj/testData/test_Aa2Cq.txt'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDOSX_proj/testData/test_AaPromoters.fas'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 6,
        'selection_start': 1},
                       loc('MDOSX_proj/testData/test_AgPromoters.fas'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 6,
        'selection_start': 1},
                       loc('MDOSX_proj/testData/test_Cq2Dm.txt'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 27,
        'sel-line-start': 512,
        'selection_end': 530,
        'selection_start': 530},
                       loc('MDOSX_proj/testData/test_CqPromoters.fas'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 44,
        'selection_end': 49,
        'selection_start': 49},
                       loc('MDOSX_proj/testData/test_coRegdGeneList.txt'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDOSX_proj/test_combineOrthoTabs.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 11,
        'sel-line-start': 749,
        'selection_end': 749,
        'selection_start': 749},
                       loc('MDOSX_proj/test_combineOrthoTabsJamesDefs.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 29,
        'sel-line-start': 1409,
        'selection_end': 1409,
        'selection_start': 1409},
                       loc('MDOSX_proj/test_orthoSets.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 198,
        'selection_end': 198,
        'selection_start': 198},
                       loc('MDOSX_proj/test_searchOrthoGroups.py'): {'attrib'\
        '-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 805,
        'selection_end': 805,
        'selection_start': 805},
                       loc('MDOSX_proj/test_spawnOrthoGroups.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 91,
        'selection_end': 134,
        'selection_start': 134},
                       loc('ModuleDiscovery/biggerComboParamsFromMatrix.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'sel-line': 28,
        'sel-line-start': 994,
        'selection_end': 996,
        'selection_start': 996},
                       loc('ModuleDiscovery/buildModulesFromMap.BAK_052908.py'): {''\
        'attrib-starts': [],
        'first-line': 56,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('ModuleDiscovery/buildModulesFromMap.py'): {'attr'\
        'ib-starts': [],
        'first-line': 16,
        'sel-line': 74,
        'sel-line-start': 2780,
        'selection_end': 2785,
        'selection_start': 2785},
                       loc('ModuleDiscovery/buildModulesFromMapSmalLScale.py'): {''\
        'attrib-starts': [],
        'first-line': 71,
        'sel-line': 69,
        'sel-line-start': 2645,
        'selection_end': 2650,
        'selection_start': 2650},
                       loc('ModuleDiscovery/calcHyperGeoFromMatrixResults.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 270,
        'selection_end': 354,
        'selection_start': 287},
                       loc('ModuleDiscovery/combosByTableLookUp.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'sel-line': 18,
        'sel-line-start': 935,
        'selection_end': 973,
        'selection_start': 973},
                       loc('ModuleDiscovery/countMotifsByAgapFromMap.py'): {''\
        'attrib-starts': [],
        'first-line': 12,
        'sel-line': 98,
        'sel-line-start': 3473,
        'selection_end': 3508,
        'selection_start': 3508},
                       loc('ModuleDiscovery/createA_GAP_v_Motif_Matrix.py'): {''\
        'attrib-starts': [],
        'first-line': 26,
        'sel-line': 48,
        'sel-line-start': 1748,
        'selection_end': 1775,
        'selection_start': 1775},
                       loc('ModuleDiscovery/create_AGAP_v_Motif_Matrix.py'): {''\
        'attrib-starts': [],
        'first-line': 27,
        'folded-linenos': [],
        'sel-line': 16,
        'sel-line-start': 974,
        'selection_end': 980,
        'selection_start': 978},
                       loc('ModuleDiscovery/cullLargePValFile.py'): {'attrib'\
        '-starts': [],
        'first-line': 0,
        'sel-line': 6,
        'sel-line-start': 281,
        'selection_end': 447,
        'selection_start': 447},
                       loc('ModuleDiscovery/defs_moduleByTableLookUp.py'): {''\
        'attrib-starts': [('makeFwdAndRevCompRegExObj',
                           99)],
        'first-line': 95,
        'sel-line': 106,
        'sel-line-start': 3352,
        'selection_end': 3396,
        'selection_start': 3385},
                       loc('ModuleDiscovery/defs_moduleClusterHyperGeo.py'): {''\
        'attrib-starts': [('findModuleInWindow',
                           105)],
        'first-line': 102,
        'sel-line': 117,
        'sel-line-start': 3540,
        'selection_end': 3586,
        'selection_start': 3548},
                       loc('ModuleDiscovery/dev_buildMotifPairsForAGAP.py'): {''\
        'attrib-starts': [('buildMotifPairsForAGAP',
                           4)],
        'first-line': 0,
        'sel-line': 4,
        'sel-line-start': 26,
        'selection_end': 2801,
        'selection_start': 26},
                       loc('ModuleDiscovery/dev_motifPairs_buildModulesFromMap.py'): {''\
        'attrib-starts': [('groupMap',
                           114)],
        'first-line': 140,
        'folded-linenos': [],
        'sel-line': 147,
        'sel-line-start': 5499,
        'selection_end': 5586,
        'selection_start': 5499},
                       loc('ModuleDiscovery/dev_motifPairs_buildModulesFromMapCombo.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('ModuleDiscovery/extractClusterPvals.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'sel-line': 12,
        'sel-line-start': 486,
        'selection_end': 563,
        'selection_start': 486},
                       loc('ModuleDiscovery/moduleClusterHyperGeo.out'): {'a'\
        'ttrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('ModuleDiscovery/moduleClusterHyperGeo.py'): {'at'\
        'trib-starts': [],
        'first-line': 12,
        'sel-line': 14,
        'sel-line-start': 319,
        'selection_end': 465,
        'selection_start': 465},
                       loc('ModuleDiscovery/moduleMapDefs.bak.py'): {'attrib'\
        '-starts': [('buildModulesForAGAP',
                     31)],
        'first-line': 26,
        'sel-line': 31,
        'sel-line-start': 1177,
        'selection_end': 1262,
        'selection_start': 1262},
                       loc('ModuleDiscovery/moduleMapDefs.py'): {'attrib-sta'\
        'rts': [('spawnMotifInstances4AGAPv2',
                 126)],
        'first-line': 150,
        'folded-linenos': [],
        'sel-line': 160,
        'sel-line-start': 6512,
        'selection_end': 6518,
        'selection_start': 6516},
                       loc('ModuleDiscovery/motifMap.py'): {'attrib-starts': [(''\
        'findAllMotifs',
        63)],
        'first-line': 51,
        'folded-linenos': [],
        'sel-line': 79,
        'sel-line-start': 3249,
        'selection_end': 3306,
        'selection_start': 3306},
                       loc('ModuleDiscovery/nrListOfMotifsInComboList.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 14,
        'sel-line-start': 480,
        'selection_end': 507,
        'selection_start': 507},
                       loc('ModuleDiscovery/orderMotifPairs.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 7,
        'folded-linenos': [],
        'sel-line': 21,
        'sel-line-start': 709,
        'selection_end': 709,
        'selection_start': 709},
                       loc('ModuleDiscovery/sparePartsFromClusterHyperGeo.py'): {''\
        'attrib-starts': [('convertMotifList',
                           53)],
        'first-line': 60,
        'sel-line': 66,
        'sel-line-start': 2289,
        'selection_end': 2430,
        'selection_start': 2337},
                       loc('ModuleDiscovery/subtract_MOPAT_headers.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 915,
        'selection_end': 1000,
        'selection_start': 925},
                       loc('ModuleDiscovery/testModuleCode.py'): {'attrib-st'\
        'arts': [],
        'first-line': 0,
        'sel-line': 8,
        'sel-line-start': 301,
        'selection_end': 383,
        'selection_start': 383},
                       loc('ModuleDiscovery/testMotifComboList.txt'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'sel-line': 1,
        'sel-line-start': 12,
        'selection_end': 23,
        'selection_start': 23},
                       loc('TAMOModuleWork/crmClasses.py'): {'attrib-starts': [],
        'first-line': 28,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('TAMOModuleWork/devClasses.py'): {'attrib-starts': [(''\
        'SeqMap',
        3),
        ('SeqMap._updateMotifs',
         44)],
        'first-line': 28,
        'folded-linenos': [],
        'sel-line': 45,
        'sel-line-start': 1619,
        'selection_end': 1627,
        'selection_start': 1627},
                       loc('Tu_miRNA/MDOSkmersIn2species.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/combineOrthologs_fromSeedTabs.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 32,
        'sel-line-start': 1016,
        'selection_end': 1020,
        'selection_start': 1020},
                       loc('Tu_miRNA/combineOrthologs_fromSeedTabs_3Genomes.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 256,
        'selection_end': 334,
        'selection_start': 334},
                       loc('Tu_miRNA/countHItsIn_N_orthologs.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 621,
        'selection_end': 732,
        'selection_start': 732},
                       loc('Tu_miRNA/counts4AllThree.py'): {'attrib-starts': [(''\
        'filter4genes',
        46)],
        'first-line': 24,
        'folded-linenos': [],
        'sel-line': 68,
        'sel-line-start': 2680,
        'selection_end': 2684,
        'selection_start': 2684},
                       loc('Tu_miRNA/fastaKmersIn2species.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 540,
        'selection_end': 627,
        'selection_start': 627},
                       loc('Tu_miRNA/fastakmersIn2species.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/matchMDOSseeds2Known.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 66,
        'sel-line-start': 2288,
        'selection_end': 2307,
        'selection_start': 2307},
                       loc('Tu_miRNA/matchSeeds2Known.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/miRNAs2SeedFastas.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 130,
        'selection_end': 226,
        'selection_start': 143},
                       loc('Tu_miRNA/seedHitsFromMDOS.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/tabulate_miRNAseeds.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 251,
        'selection_end': 374,
        'selection_start': 260},
                       loc('Tu_miRNA/targetingAllInOne.py'): {'attrib-starts': [(''\
        'SeedModels',
        4),
        ('SeedModels.__init__',
         5)],
        'first-line': 20,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 167,
        'selection_end': 205,
        'selection_start': 205},
                       loc('Tu_miRNA/targetsIn2species.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 365,
        'selection_end': 378,
        'selection_start': 378},
                       loc('Tu_miRNA/test_seedObj.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 129,
        'selection_end': 129,
        'selection_start': 129},
                       loc('allTestNR.txt'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('checkProbe2ProbeBlast.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('chooseRandomFromList.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 152,
        'selection_end': 177,
        'selection_start': 177},
                       loc('clusterDefs2multiFastaFiles.py'): {'attrib-start'\
        's': [],
        'first-line': 8,
        'folded-linenos': [],
        'sel-line': 46,
        'sel-line-start': 1596,
        'selection_end': 1596,
        'selection_start': 1596},
                       loc('clusterHyperGeo/clusterHyperGeo.py'): {'attrib-s'\
        'tarts': [('countMotifInAll',
                   10)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 46,
        'sel-line-start': 1542,
        'selection_end': 1627,
        'selection_start': 1627},
                       loc('cluster_1.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 12,
        'sel-line-start': 216,
        'selection_end': 235,
        'selection_start': 235},
                       loc('cluster_2.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 9,
        'sel-line-start': 191,
        'selection_end': 210,
        'selection_start': 210},
                       loc('codingBounds.py'): {'attrib-starts': [('combineE'\
        'xons',
        6)],
        'first-line': 44,
        'sel-line': 57,
        'sel-line-start': 2511,
        'selection_end': 2653,
        'selection_start': 2533},
                       loc('collapseMotifsOnRevComp.py'): {'attrib-starts': [(''\
        'makeFwdAndRevCompRegExObj_IUPAC',
        4)],
        'first-line': 11,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 649,
        'selection_end': 649,
        'selection_start': 649},
                       loc('convertFastaNames.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 42,
        'sel-line-start': 1284,
        'selection_end': 1284,
        'selection_start': 1284},
                       loc('corePromoterStuff/chromOri2geneOri.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 308,
        'selection_end': 462,
        'selection_start': 462},
                       loc('corePromoterStuff/count2MotifsConstrainedDist.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 38,
        'sel-line-start': 1204,
        'selection_end': 1204,
        'selection_start': 1204},
                       loc('corePromoterStuff/mapAndCountMotif.py'): {'attri'\
        'b-starts': [('HitList',
                      4),
                     ('HitList.countSeqWithHit',
                      11)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 13,
        'sel-line-start': 298,
        'selection_end': 333,
        'selection_start': 333},
                       loc('corePromoterStuff/mapAndCount_InrDpe.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('corePromoterStuff/mapAndLogMotif.py'): {'attrib-'\
        'starts': [],
        'first-line': 123,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 153,
        'selection_end': 153,
        'selection_start': 153},
                       loc('corePromoterStuff/mapAndSlice2Motifs.py'): {'att'\
        'rib-starts': [('HitList',
                        4),
                       ('HitList.countSeqWithHit',
                        12)],
        'first-line': 47,
        'folded-linenos': [],
        'sel-line': 78,
        'sel-line-start': 2509,
        'selection_end': 2546,
        'selection_start': 2546},
                       loc('corePromoterStuff/mapCount2ndMotif.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 496,
        'selection_end': 518,
        'selection_start': 518},
                       loc('corePromoterStuff/nrOnFastaSequence.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 28,
        'selection_end': 237,
        'selection_start': 41},
                       loc('corePromoterStuff/plotHitsOnAlignedSeqs.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 52,
        'sel-line-start': 1538,
        'selection_end': 1538,
        'selection_start': 1538},
                       loc('corePromoterStuff/reOrientOnNewInr.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 393,
        'selection_end': 528,
        'selection_start': 528},
                       loc('cullListFileByField.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 209,
        'selection_end': 316,
        'selection_start': 225},
                       loc('defs/JamesDefs.py'): {'attrib-starts': [('odd_or'\
        '_even',
        5)],
        'first-line': 20,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 111,
        'selection_end': 126,
        'selection_start': 115},
                       loc('defs/Todd_hypergeometric.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('defs/XieDefs.py'): {'attrib-starts': [('pValHypG'\
        'eom',
        56)],
        'first-line': 9,
        'sel-line': 75,
        'sel-line-start': 1287,
        'selection_end': 1287,
        'selection_start': 1287},
                       loc('defs/bioDefs.py'): {'attrib-starts': [('bestIden'\
        'tOverLen',
        112)],
        'first-line': 104,
        'folded-linenos': [],
        'sel-line': 112,
        'sel-line-start': 2830,
        'selection_end': 2850,
        'selection_start': 2834},
                       loc('defs/crmClasses.py'): {'attrib-starts': [('SeqMa'\
        'p',
        7),
        ('SeqMap.__init__',
         13)],
        'first-line': 28,
        'folded-linenos': [],
        'sel-line': 32,
        'sel-line-start': 1162,
        'selection_end': 1171,
        'selection_start': 1171},
                       loc('defs/defTesting.py'): {'attrib-starts': [('count'\
        'Motif',
        0)],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('defs/defs_moduleByTableLookUp.py'): {'attrib-sta'\
        'rts': [('makeFwdAndRevCompRegExObj_IUPAC',
                 100)],
        'first-line': 87,
        'sel-line': 106,
        'sel-line-start': 3361,
        'selection_end': 3390,
        'selection_start': 3390},
                       loc('defs/defs_moduleClusterHyperGeo.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'sel-line': 1,
        'sel-line-start': 17,
        'selection_end': 62,
        'selection_start': 62},
                       loc('defs/developingDefs.py'): {'attrib-starts': [('c'\
        'ountMotifInAll',
        2)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 152,
        'selection_end': 152,
        'selection_start': 152},
                       loc('defs/doug_hypergeometric.py'): {'attrib-starts': [(''\
        'binc',
        6)],
        'first-line': 5,
        'folded-linenos': [],
        'sel-line': 11,
        'sel-line-start': 323,
        'selection_end': 330,
        'selection_start': 330},
                       loc('defs/fasta.py'): {'attrib-starts': [('read_fasta',
        14)],
        'first-line': 0,
        'sel-line': 20,
        'sel-line-start': 645,
        'selection_end': 665,
        'selection_start': 665},
                       loc('defs/fasta_mer_dictionary.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 13,
        'sel-line-start': 264,
        'selection_end': 279,
        'selection_start': 279},
                       loc('defs/fjoin.py'): {'attrib-starts': [('FJoin',
        151),
        ('FJoin.parseCmdLine',
         474)],
        'first-line': 888,
        'folded-linenos': [],
        'sel-line': 474,
        'sel-line-start': 16236,
        'selection_end': 16253,
        'selection_start': 16241},
                       loc('defs/mosqData/__init__.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 1,
        'selection_start': 1},
                       loc('defs/mosqData/promoterSeqPaths.py'): {'attrib-st'\
        'arts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('defs/promoterSeqPaths.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('defs/selectFastas.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 20,
        'sel-line-start': 820,
        'selection_end': 943,
        'selection_start': 943},
                       loc('defs/seqStats.py'): {'attrib-starts': [('calcSta'\
        'ts',
        7)],
        'first-line': 14,
        'folded-linenos': [],
        'sel-line': 43,
        'sel-line-start': 960,
        'selection_end': 982,
        'selection_start': 973},
                       loc('defs/statsCollection.py'): {'attrib-starts': [(''\
        'choose',
        20)],
        'first-line': 10,
        'folded-linenos': [],
        'sel-line': 22,
        'sel-line-start': 572,
        'selection_end': 596,
        'selection_start': 596},
                       loc('defs/statsDefs.py'): {'attrib-starts': [('cumHyp'\
        'ergeoP',
        78)],
        'first-line': 47,
        'folded-linenos': [],
        'sel-line': 81,
        'sel-line-start': 1782,
        'selection_end': 1908,
        'selection_start': 1782},
                       loc('defs/testingADef.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 89,
        'selection_end': 89,
        'selection_start': 89},
                       loc('defs/testingDefs.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('defs/untitled-3.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 4,
        'sel-line-start': 32,
        'selection_end': 32,
        'selection_start': 32},
                       loc('defs/xpermutations.py'): {'attrib-starts': [('xu'\
        'niqueCombinations',
        27)],
        'first-line': 48,
        'folded-linenos': [],
        'sel-line': 27,
        'sel-line-start': 799,
        'selection_end': 822,
        'selection_start': 803},
                       loc('defs_microArray.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('dougListTest.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 2,
        'sel-line-start': 12,
        'selection_end': 16,
        'selection_start': 16},
                       loc('encryptionStuff/RotatingCipher.py'): {'attrib-st'\
        'arts': [('VariableRotatingCipher',
                  62),
                 ('VariableRotatingCipher._RotateCipher',
                  69)],
        'first-line': 72,
        'sel-line': 90,
        'sel-line-start': 2899,
        'selection_end': 2899,
        'selection_start': 2899},
                       loc('extractGenesFromClusters.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 246,
        'selection_end': 246,
        'selection_start': 246},
                       loc('fjoin.help'): {'attrib-starts': [],
        'first-line': 22,
        'sel-line': 37,
        'sel-line-start': 2229,
        'selection_end': 2271,
        'selection_start': 2271},
                       loc('fjoin.py'): {'attrib-starts': [('Feature',
        760),
        ('Feature.__init__',
         766)],
        'first-line': 772,
        'sel-line': 789,
        'sel-line-start': 25452,
        'selection_end': 25452,
        'selection_start': 25452},
                       loc('fjoin.py.bak.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('fjoinConfilctResolver.bak.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('fjoinConfilctResolver.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('fjoinConfilctResolverTesting.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('fjoinConfilctResolverV2.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('fjoinCtrlr.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 10,
        'sel-line-start': 391,
        'selection_end': 422,
        'selection_start': 422},
                       loc('gClasses/MDAP/MDAPbase.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('gClasses/gSeqClasses.py'): {'attrib-starts': [(''\
        'DNAseq',
        137)],
        'first-line': 132,
        'folded-linenos': [],
        'sel-line': 143,
        'sel-line-start': 4337,
        'selection_end': 4364,
        'selection_start': 4364},
                       loc('gClasses/supportVars.py'): {'attrib-starts': [],
        'first-line': 39,
        'folded-linenos': [],
        'sel-line': 44,
        'sel-line-start': 407,
        'selection_end': 407,
        'selection_start': 407},
                       loc('gClasses/test_DNAseq.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 56,
        'selection_end': 56,
        'selection_start': 56},
                       loc('getLineFromList.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 14,
        'sel-line-start': 478,
        'selection_end': 478,
        'selection_start': 478},
                       loc('jamesDefs.py'): {'attrib-starts': [('groupedBioM'\
        'art',
        0)],
        'first-line': 0,
        'sel-line': 12,
        'sel-line-start': 431,
        'selection_end': 439,
        'selection_start': 439},
                       loc('list2numberedFasta.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 14,
        'sel-line-start': 556,
        'selection_end': 580,
        'selection_start': 580},
                       loc('listOflists4doug.py'): {'attrib-starts': [],
        'first-line': 5,
        'sel-line': 21,
        'sel-line-start': 1049,
        'selection_end': 1074,
        'selection_start': 1074},
                       loc('list_comparison.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 39,
        'sel-line-start': 612,
        'selection_end': 623,
        'selection_start': 623},
                       loc('loadList2DictPlusDougsDefs.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 34,
        'sel-line-start': 872,
        'selection_end': 872,
        'selection_start': 872},
                       loc('makeJudysDB.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('microArrayStuff/checkProbe2ProbeBlast_V2.py'): {''\
        'attrib-starts': [('writeOutMatchData',
                           34)],
        'first-line': 49,
        'folded-linenos': [],
        'sel-line': 56,
        'sel-line-start': 2517,
        'selection_end': 2562,
        'selection_start': 2542},
                       loc('microArrayStuff/checkProbe2TxsBlast_V2.py'): {'a'\
        'ttrib-starts': [('writeOutMatchData',
                          6)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 140,
        'selection_end': 197,
        'selection_start': 197},
                       loc('microArrayStuff/defs_microArray.py'): {'attrib-s'\
        'tarts': [('geneVectors',
                   2),
                  ('geneVectors.__init__',
                   7)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 19,
        'sel-line-start': 620,
        'selection_end': 620,
        'selection_start': 620},
                       loc('microArrayStuff/filterProbeMatchSets.py'): {'att'\
        'rib-starts': [],
        'first-line': 8,
        'folded-linenos': [],
        'sel-line': 13,
        'sel-line-start': 487,
        'selection_end': 648,
        'selection_start': 648},
                       loc('microArrayStuff/probeSets2geneVectors.py'): {'at'\
        'trib-starts': [('main',
                         12)],
        'first-line': 4,
        'folded-linenos': [],
        'sel-line': 21,
        'sel-line-start': 679,
        'selection_end': 683,
        'selection_start': 683},
                       loc('microArrayStuff/testGeneVectorsClass.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 167,
        'selection_end': 207,
        'selection_start': 207},
                       loc('microArrayStuff/untitled-1.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 1,
        'selection_start': 1},
                       loc('nonRedunList.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 31,
        'sel-line-start': 758,
        'selection_end': 1066,
        'selection_start': 758},
                       loc('nonRedunListFirstIndex.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 33,
        'sel-line-start': 1003,
        'selection_end': 1012,
        'selection_start': 1012},
                       loc('nonRedunList_sysArgs.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 367,
        'selection_end': 409,
        'selection_start': 409},
                       loc('orthologPrep/combineOrthologs.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 17,
        'sel-line-start': 587,
        'selection_end': 675,
        'selection_start': 675},
                       loc('orthologPrep/combineOrthologs_fromSeedTabs.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('orthologPrep/fasta.py'): {'attrib-starts': [('Fa'\
        'sta',
        2),
        ('Fasta.__init__',
         3)],
        'first-line': 0,
        'sel-line': 12,
        'sel-line-start': 407,
        'selection_end': 417,
        'selection_start': 417},
                       loc('orthologPrep/test.fas'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 5,
        'sel-line-start': 51,
        'selection_end': 69,
        'selection_start': 69},
                       loc('orthologPrep/testSeqIO.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 10,
        'sel-line-start': 308,
        'selection_end': 333,
        'selection_start': 333},
                       loc('printingFuncs.py'): {'attrib-starts': [('prnDict',
        0)],
        'first-line': 8,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('proteinCoverageByLowerCase.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 27,
        'sel-line-start': 640,
        'selection_end': 649,
        'selection_start': 649},
                       loc('randomKmers.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 1092,
        'selection_start': 0},
                       loc('reorderFastaHeader.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 5,
        'sel-line-start': 117,
        'selection_end': 196,
        'selection_start': 196},
                       loc('revComp_list.py'): {'attrib-starts': [],
        'first-line': 8,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 258,
        'selection_end': 322,
        'selection_start': 322},
                       loc('sc_67933097fdd75c33d4a8510b92e036032.cpp'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('smallTestData'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('softMask2hardMask.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 948,
        'selection_start': 0},
                       loc('testDataALL.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testGroupByField.py'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 6,
        'sel-line-start': 194,
        'selection_end': 256,
        'selection_start': 194},
                       loc('testNR.txt'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('test_SeqMap.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 2760,
        'selection_end': 2760,
        'selection_start': 2760},
                       loc('testing.py'): {'attrib-starts': [('moduleDict',
        1)],
        'first-line': 0,
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 29,
        'selection_start': 29},
                       loc('testingReOrderDelimitedList.py'): {'attrib-start'\
        's': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('timeItScripts/compareMotility2TAMO.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 268,
        'selection_end': 379,
        'selection_start': 276},
                       loc('time_xuniqueCombinations.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 15,
        'selection_end': 28,
        'selection_start': 28},
                       loc('untitled-2.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('usableBoudaryRegions/codingBounds.bak.py'): {'at'\
        'trib-starts': [('combineExons',
                         6)],
        'first-line': 35,
        'sel-line': 56,
        'sel-line-start': 2464,
        'selection_end': 2575,
        'selection_start': 2575},
                       loc('usableBoudaryRegions/codingBounds.py'): {'attrib'\
        '-starts': [('combineExons',
                     6)],
        'first-line': 35,
        'sel-line': 57,
        'sel-line-start': 2574,
        'selection_end': 2700,
        'selection_start': 2596},
                       loc('usableBoudaryRegions/fjoin.py'): {'attrib-starts': [(''\
        'Feature',
        760),
        ('Feature.__init__',
         766)],
        'first-line': 768,
        'sel-line': 789,
        'sel-line-start': 25604,
        'selection_end': 25604,
        'selection_start': 25604},
                       loc('usableBoudaryRegions/fjoinConfilctResolverV2.py'): {''\
        'attrib-starts': [('resolver',
                           5)],
        'first-line': 0,
        'sel-line': 75,
        'sel-line-start': 4054,
        'selection_end': 4081,
        'selection_start': 4081},
                       loc('usableBoudaryRegions/fjoinCtrlr.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'sel-line': 24,
        'sel-line-start': 866,
        'selection_end': 904,
        'selection_start': 904},
                       loc('usableBoudaryRegions/mdosJarFile_RevCompConvert.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'sel-line': 12,
        'sel-line-start': 408,
        'selection_end': 532,
        'selection_start': 532},
                       loc('usableBoudaryRegions/recombineCoords.py'): {'att'\
        'rib-starts': [],
        'first-line': 3,
        'sel-line': 15,
        'sel-line-start': 476,
        'selection_end': 579,
        'selection_start': 579},
                       loc('usableBoundaryRegions/addStpCdnForTuSeqs.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 12,
        'sel-line-start': 476,
        'selection_end': 476,
        'selection_start': 476},
                       loc('usableBoundaryRegions/analyzeNs.py'): {'attrib-s'\
        'tarts': [('formatAndWrite',
                   17)],
        'first-line': 44,
        'sel-line': 52,
        'sel-line-start': 1620,
        'selection_end': 1703,
        'selection_start': 1703},
                       loc('usableBoundaryRegions/codingBounds.py'): {'attri'\
        'b-starts': [('combineExons',
                      6)],
        'first-line': 37,
        'folded-linenos': [],
        'sel-line': 59,
        'sel-line-start': 2629,
        'selection_end': 2707,
        'selection_start': 2707},
                       loc('usableBoundaryRegions/fjoinConfilctResolverV2.py'): {''\
        'attrib-starts': [('resolver',
                           5)],
        'first-line': 44,
        'folded-linenos': [],
        'sel-line': 73,
        'sel-line-start': 3883,
        'selection_end': 3983,
        'selection_start': 3894},
                       loc('usableBoundaryRegions/fjoinCtrlr.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 816,
        'selection_end': 854,
        'selection_start': 854},
                       loc('usableBoundaryRegions/mdosJarFile_RevCompConvert.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'sel-line': 9,
        'sel-line-start': 185,
        'selection_end': 185,
        'selection_start': 185},
                       loc('usableBoundaryRegions/recombineCoords.py'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 15,
        'sel-line-start': 415,
        'selection_end': 529,
        'selection_start': 446},
                       loc('x-wingide-zip:/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/motility-0.8.2-py2.5-macosx-10.3-fat.egg/motility/__init__.py'): {''\
        'attrib-starts': [],
        'first-line': 18,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('x-wingide-zip:/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/motility-0.8.2-py2.5-macosx-10.3-fat.egg/motility/build.py'): {''\
        'attrib-starts': [('make_pwm',
                           189)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 189,
        'sel-line-start': 4961,
        'selection_end': 4973,
        'selection_start': 4965},
                       loc('x-wingide-zip:/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/motility-0.8.2-py2.5-macosx-10.3-fat.egg/motility/objects.py'): {''\
        'attrib-starts': [('PWM',
                           81),
                          ('PWM.find',
                           102)],
        'first-line': 98,
        'folded-linenos': [],
        'sel-line': 102,
        'sel-line-start': 2914,
        'selection_end': 2926,
        'selection_start': 2922},
                       loc('../../../../../../sw/lib/python2.5/site-packages/Bio/Blast/NCBIXML.py'): {''\
        'attrib-starts': [('_XMLparser',
                           25),
                          ('_XMLparser.endElement',
                           84)],
        'first-line': 82,
        'folded-linenos': [],
        'sel-line': 90,
        'sel-line-start': 2745,
        'selection_end': 2745,
        'selection_start': 2745},
                       loc('../../../../../../sw/lib/python2.5/site-packages/Bio/Blast/Record.py'): {''\
        'attrib-starts': [('Blast',
                           312)],
        'first-line': 48,
        'folded-linenos': [],
        'sel-line': 312,
        'sel-line-start': 11567,
        'selection_end': 11578,
        'selection_start': 11573},
                       loc('../../../../../../sw/lib/python2.5/site-packages/Bio/Seq.py'): {''\
        'attrib-starts': [('Seq',
                           14),
                          ('Seq.__init__',
                           15)],
        'first-line': 8,
        'folded-linenos': [],
        'sel-line': 17,
        'sel-line-start': 583,
        'selection_end': 717,
        'selection_start': 591},
                       loc('../../../../../../sw/lib/python2.5/site-packages/Bio/SeqIO/FastaIO.py'): {''\
        'attrib-starts': [('FastaWriter',
                           63),
                          ('FastaWriter.write_record',
                           104)],
        'first-line': 97,
        'sel-line': 113,
        'sel-line-start': 4388,
        'selection_end': 4388,
        'selection_start': 4388},
                       loc('../../../../../../sw/lib/python2.5/site-packages/Bio/SeqIO/__init__.py'): {''\
        'attrib-starts': [('to_dict',
                           261)],
        'first-line': 214,
        'sel-line': 296,
        'sel-line-start': 10636,
        'selection_end': 10636,
        'selection_start': 10636},
                       loc('../../../../../../sw/lib/python2.5/site-packages/matplotlib/__init__.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../../sw/lib/python2.5/site-packages/matplotlib/axes.py'): {''\
        'attrib-starts': [('_process_plot_var_args',
                           116),
                          ('_process_plot_var_args._xy_from_xy',
                           211)],
        'first-line': 212,
        'folded-linenos': [],
        'sel-line': 226,
        'sel-line-start': 7245,
        'selection_end': 7245,
        'selection_start': 7245},
                       loc('../../../../../../sw/lib/python2.5/site-packages/numpy/core/numeric.py'): {''\
        'attrib-starts': [('identity',
                           690)],
        'first-line': 690,
        'folded-linenos': [],
        'sel-line': 701,
        'sel-line-start': 21111,
        'selection_end': 21125,
        'selection_start': 21122},
                       loc('../../../../../../sw/lib/python2.5/site-packages/scipy/stats/distributions.py'): {''\
        'attrib-starts': [('rv_discrete',
                           3307),
                          ('rv_discrete.cdf',
                           3522)],
        'first-line': 3526,
        'folded-linenos': [],
        'sel-line': 3539,
        'sel-line-start': 112835,
        'selection_end': 112835,
        'selection_start': 112835},
                       loc('unknown:<untitled> #51'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #52'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #53'): {'attrib-starts': [('s'\
        'ubsetFasta',
        201)],
        'first-line': 12,
        'sel-line': 232,
        'sel-line-start': 6542,
        'selection_end': 6542,
        'selection_start': 6542},
                       loc('unknown:<untitled> #54'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 4,
        'sel-line-start': 538,
        'selection_end': 538,
        'selection_start': 538},
                       loc('unknown:<untitled> #55'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 2,
        'sel-line-start': 308,
        'selection_end': 308,
        'selection_start': 308},
                       loc('unknown:<untitled> #56'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #57'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #58'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ["float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n",
                           'from TAMO.MD import MDscan\n',
                           'mdScanObj = MDscan()\n',
                           'mdScanObj = MDscan.MDscan()\n',
                           "s = 'fileNPath'\n",
                           "s.split(';')\n",
                           'from TAMO.MotifTools import Motif\n',
                           "b = {'A':.25,'C':.25,'G':.25,'T':.25}\n",
                           'b\n',
                           "mD = Motif('WGATAR', backgroundD=b)\n",
                           "mB = Motif('WGATAR', backgroundD=b)\n",
                           "mD = Motif('WGATAR')\n",
                           'md\n',
                           'mD\n',
                           'mB\n',
                           'mB.ll\n',
                           'mN = mD.new_bg(b)\n',
                           'mD.ll\n',
                           'mB.logP\n',
                           'mD.logP\n',
                           'mN\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #59'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #60'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ["float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n",
                           'from TAMO.MD import MDscan\n',
                           'mdScanObj = MDscan()\n',
                           'mdScanObj = MDscan.MDscan()\n',
                           "s = 'fileNPath'\n",
                           "s.split(';')\n",
                           'from TAMO.MotifTools import Motif\n',
                           "b = {'A':.25,'C':.25,'G':.25,'T':.25}\n",
                           'b\n',
                           "mD = Motif('WGATAR', backgroundD=b)\n",
                           "mB = Motif('WGATAR', backgroundD=b)\n",
                           "mD = Motif('WGATAR')\n",
                           'md\n',
                           'mD\n',
                           'mB\n',
                           'mB.ll\n',
                           'mN = mD.new_bg(b)\n',
                           'mD.ll\n',
                           'mB.logP\n',
                           'mD.logP\n',
                           'mN\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #61'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['sD = shuffleSeqDict(d)\n',
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('TGATAACG')\n",
                           'm.bestscore\n',
                           'm.bestscore()\n',
                           'm.best_factor()\n',
                           'm.best_factor\n',
                           'd = m.best_factor\n',
                           'd\n',
                           'm.summary\n',
                           'm.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n",
                           "s = '#laksdlkj'\n",
                           "s.startswith('#')l = \n",
                           'l=[1,2,3,4,5]\n',
                           'l.pop()\n',
                           'l.pop(0)\n',
                           'l.pop(-1)\n',
                           'l = [[1,2],[1,2],[1,2],[1,2]]\n',
                           'l\n',
                           'map(lambda l: l[1])\n',
                           'map(lambda i: i[1],l)\n',
                           'l = [1,4,5,646,7,9]\n',
                           'n = 45\n',
                           "n.astype('float')\n",
                           'd = [1,2,4,4,3,6,2,1,7,4,8,7,9,4,5,7,3,0,9,2,3,4'\
                           ']\n',
                           'numpy.histogram(d)\n',
                           'n,bins = numpy.histogram(d, bins=9, normed=1)\n',
                           'print numpy.__version__\n',
                           'print matplotlib.__version__\n',
                           'print numpy.histogram.__doc__\n',
                           'numpy\n',
                           'numpy.histogram2d.__doc__\n',
                           'print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #62'): {'attrib-starts': [],
        'first-line': 14,
        'folded-linenos': [],
        'history': {None: ['m.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n",
                           "s = '#laksdlkj'\n",
                           "s.startswith('#')l = \n",
                           'l=[1,2,3,4,5]\n',
                           'l.pop()\n',
                           'l.pop(0)\n',
                           'l.pop(-1)\n',
                           'l = [[1,2],[1,2],[1,2],[1,2]]\n',
                           'l\n',
                           'map(lambda l: l[1])\n',
                           'map(lambda i: i[1],l)\n',
                           'l = [1,4,5,646,7,9]\n',
                           'n = 45\n',
                           "n.astype('float')\n",
                           'd = [1,2,4,4,3,6,2,1,7,4,8,7,9,4,5,7,3,0,9,2,3,4'\
                           ']\n',
                           'numpy.histogram(d)\n',
                           'n,bins = numpy.histogram(d, bins=9, normed=1)\n',
                           'print numpy.__version__\n',
                           'print matplotlib.__version__\n',
                           'print numpy.histogram.__doc__\n',
                           'numpy\n',
                           'numpy.histogram2d.__doc__\n',
                           'print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n',
                           'import random\n',
                           'random.choice(range(100))\n',
                           'random.choice(range(10,50))\n']},
        'sel-line': 18,
        'sel-line-start': 423,
        'selection_end': 427,
        'selection_start': 427},
                       loc('unknown:<untitled> #63'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #64'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #65'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #66'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #67'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 4,
        'sel-line-start': 538,
        'selection_end': 538,
        'selection_start': 538},
                       loc('unknown:<untitled> #68'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ["float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n",
                           'from TAMO.MD import MDscan\n',
                           'mdScanObj = MDscan()\n',
                           'mdScanObj = MDscan.MDscan()\n',
                           "s = 'fileNPath'\n",
                           "s.split(';')\n",
                           'from TAMO.MotifTools import Motif\n',
                           "b = {'A':.25,'C':.25,'G':.25,'T':.25}\n",
                           'b\n',
                           "mD = Motif('WGATAR', backgroundD=b)\n",
                           "mB = Motif('WGATAR', backgroundD=b)\n",
                           "mD = Motif('WGATAR')\n",
                           'md\n',
                           'mD\n',
                           'mB\n',
                           'mB.ll\n',
                           'mN = mD.new_bg(b)\n',
                           'mD.ll\n',
                           'mB.logP\n',
                           'mD.logP\n',
                           'mN\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #69'): {'attrib-starts': [],
        'first-line': 5,
        'folded-linenos': [],
        'history': {None: ['d = m.best_factor\n',
                           'd\n',
                           'm.summary\n',
                           'm.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n",
                           "s = '#laksdlkj'\n",
                           "s.startswith('#')l = \n",
                           'l=[1,2,3,4,5]\n',
                           'l.pop()\n',
                           'l.pop(0)\n',
                           'l.pop(-1)\n',
                           'l = [[1,2],[1,2],[1,2],[1,2]]\n',
                           'l\n',
                           'map(lambda l: l[1])\n',
                           'map(lambda i: i[1],l)\n',
                           'l = [1,4,5,646,7,9]\n',
                           'n = 45\n',
                           "n.astype('float')\n",
                           'd = [1,2,4,4,3,6,2,1,7,4,8,7,9,4,5,7,3,0,9,2,3,4'\
                           ']\n',
                           'numpy.histogram(d)\n',
                           'n,bins = numpy.histogram(d, bins=9, normed=1)\n',
                           'print numpy.__version__\n',
                           'print matplotlib.__version__\n',
                           'print numpy.histogram.__doc__\n',
                           'numpy\n',
                           'numpy.histogram2d.__doc__\n',
                           'print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n']},
        'sel-line': 8,
        'sel-line-start': 209,
        'selection_end': 250,
        'selection_start': 223},
                       loc('unknown:<untitled> #70'): {'attrib-starts': [],
        'first-line': 0,
        'history': {},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #71'): {'attrib-starts': [],
        'first-line': 10,
        'folded-linenos': [],
        'history': {None: ["s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n",
                           "s = '#laksdlkj'\n",
                           "s.startswith('#')l = \n",
                           'l=[1,2,3,4,5]\n',
                           'l.pop()\n',
                           'l.pop(0)\n',
                           'l.pop(-1)\n',
                           'l = [[1,2],[1,2],[1,2],[1,2]]\n',
                           'l\n',
                           'map(lambda l: l[1])\n',
                           'map(lambda i: i[1],l)\n',
                           'l = [1,4,5,646,7,9]\n',
                           'n = 45\n',
                           "n.astype('float')\n",
                           'd = [1,2,4,4,3,6,2,1,7,4,8,7,9,4,5,7,3,0,9,2,3,4'\
                           ']\n',
                           'numpy.histogram(d)\n',
                           'n,bins = numpy.histogram(d, bins=9, normed=1)\n',
                           'print numpy.__version__\n',
                           'print matplotlib.__version__\n',
                           'print numpy.histogram.__doc__\n',
                           'numpy\n',
                           'numpy.histogram2d.__doc__\n',
                           'print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n',
                           'import random\n',
                           'random.choice(range(100))\n',
                           'random.choice(range(10,50))\n',
                           'l = [1,1,2,2,3,3,4,4,5,5]\n',
                           'zip(l)\n',
                           'zip(l,2)\n',
                           'odd\n']},
        'sel-line': 14,
        'sel-line-start': 525,
        'selection_end': 529,
        'selection_start': 529},
                       loc('unknown:<untitled> #72'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'i = 6\n',
                           "s ='-minw 6 -maxw 18 '\n",
                           "if '-' in s:\n",
                           "if '-minw' and '-maxw' in s:\n",
                           "if '-minw' and '-maxr' in s:\n",
                           "\tprint 'y'\n",
                           'l = [1,2,3]\n',
                           'l[1:2]\n',
                           'l[1:3]\n',
                           'd = {1:3,2:4}\n',
                           'd = {1:"3",2:"4"}\n',
                           "''.join(d.values())\n",
                           "len(''.join(d.values()))\n",
                           'import sys\n',
                           'print os.listdir()\n',
                           "print os.listdir('')\n",
                           'os.path()\n',
                           'os.curdir()\n',
                           'os.curdir\n',
                           'os.path(0)\n',
                           'os.path[0]\n',
                           'os.path\n',
                           'sys.path(0)\n',
                           'sys.path[0]\n',
                           "d = '3'\n",
                           "print '%d' % (d)\n",
                           "print '%d' % (int(d))\n",
                           'from datetime import datetime\n',
                           'datetime()\n',
                           'from datetime import date\n',
                           'date.today\n',
                           'date.today()\n',
                           'print date.today()\n',
                           'date.ctime()\n',
                           'datetime.now()\n',
                           'datetime.time()\n',
                           'datetime.time(datetime.now())\n',
                           'import time\n',
                           'time.ctime()\n',
                           "time.ctime().replace(' ','_')\n",
                           'os.cwd()\n',
                           'sys.path\n',
                           "tF=open('TestingFile.txt','w')\n",
                           'str(tF)\n',
                           'import os\n',
                           'os.path(tF)\n',
                           'os.path.exists(tF)\n',
                           'os.path.realpath\n',
                           'os.path.realpath()\n',
                           'os.path.realpath(tF)\n',
                           'from TAMO.MD import Meme\n',
                           'from TAMO.MD.Meme import Meme\n',
                           'm = Meme()\n',
                           'm\n',
                           'm.lines\n',
                           'm._parse()\n',
                           'm.motifs\n',
                           'from TAMO.MotifMetrics import ProbeSet\n',
                           "pS = ProbeSet('/Users/biggus/Documents/James/Dat"\
                           "a/2KB/2kb_Sequence/2kb_Anopheles/2KBupTSS_goodAf"\
                           "fyAGAPsFastasOUT.masked.nr.fas')\n",
                           "coRegSeqs = '/Users/biggus/Documents/James/Data/"\
                           "ReClustering/kmedsPear33Clus50x_2/Clus2_247genes"\
                           ".genes.txt'\n",
                           "pS.matching_ids('',coRegSeqs,)\n",
                           "coRegSeqs = map(lambda l: l.strip(), open(coRegS"\
                           "eqs, 'rU').readlines())\n",
                           'coRegSeqs\n',
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.8)\n",
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.7)\n",
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.5)\n",
                           "pS.matching_ids('GATA',coRegSeqs, 0.5)\n",
                           'd = {}\n',
                           'type(d)\n',
                           "assert type(d) == 'dict', 'you ar ethe wrong typ"\
                           "e'\n",
                           'd.__class__\n',
                           'type(d.__class__)\n',
                           "assert type(d) is dict, 'you ar ethe wrong type'"\
                           "\n",
                           "assert type(d) is str, 'you ar ethe wrong type'\n",
                           "assert type(d) is str, 'you ar ethe wrong type'f"\
                           "rom \n",
                           'from MDAP_defs import shuffleSeqDict\n',
                           "d = {1:'why',2:'are ',3:'you wrong?'}\n",
                           'list(d[1])\n',
                           'd[1]\n',
                           'sD = shuffleSeqDict(d)\n',
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('TGATAACG')\n",
                           'm.bestscore\n',
                           'm.bestscore()\n',
                           'm.best_factor()\n',
                           'm.best_factor\n',
                           'd = m.best_factor\n',
                           'd\n',
                           'm.summary\n',
                           'm.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #73'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #74'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #75'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 2,
        'sel-line-start': 308,
        'selection_end': 308,
        'selection_start': 308},
                       loc('unknown:<untitled> #76'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #77'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 4,
        'sel-line-start': 538,
        'selection_end': 538,
        'selection_start': 538},
                       loc('unknown:<untitled> #78'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'from TAMO.MotifTools import Motif\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #79'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #80'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 4,
        'sel-line-start': 538,
        'selection_end': 538,
        'selection_start': 538},
                       loc('unknown:<untitled> #81'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ["\tprint 'yes'\n",
                           'else:\n',
                           "\tprint 'no'\n",
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('WGATAR')\n",
                           'm\n',
                           'r = m.revcomp()\n',
                           'r.re\n',
                           'm = 1\n',
                           'r = 8\n',
                           'min([m,r])\n',
                           "l = [['f',2],['r',1],['a',9]]\n",
                           "l = [[2, 'f'], [1, 'r'], [9,'a']]\n",
                           'l.sort\n',
                           'l.sort()\n',
                           'l.reverse()\n',
                           'from numpy import correlate\n',
                           'x = [1,2,3,4,1]\n',
                           'y1 = [1,2,3,4,5]\n',
                           'y2 = [1*3,2*3,3*3,4*3,1*3]\n',
                           'y1 = x.reverse()\n',
                           'x.reverse()\n',
                           'y1 = x[::-1]\n',
                           'y2\n',
                           'x = array(x)\n',
                           'y1 = array(y1)\n',
                           'y2 = array(y2)\n',
                           'for i in [x,y1,y2]:\n',
                           '\tprint i\n',
                           "x_x = correlate(x,x,'pearson')\n",
                           "x_x = correlate(x,x,mode='pearson')\n",
                           'from scipy import stat\n',
                           'from scipy import stats\n',
                           'stats.stats.pearsonr([1,2,3],[3,2,1])\n',
                           'stats.stats.pearsonr(x,y1)\n',
                           'y1\n',
                           'stats.stats.pearsonr(x,y2)\n',
                           'import numpy as np\n',
                           'np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #82'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #83'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 2,
        'sel-line-start': 308,
        'selection_end': 308,
        'selection_start': 308},
                       loc('unknown:<untitled> #84'): {'attrib-starts': [],
        'first-line': 100,
        'folded-linenos': [],
        'history': {None: ['np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'from TAMO.MotifTools import Motif\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n"]},
        'sel-line': 107,
        'sel-line-start': 3622,
        'selection_end': 3626,
        'selection_start': 3626},
                       loc('unknown:<untitled> #85'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['sD = shuffleSeqDict(d)\n',
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('TGATAACG')\n",
                           'm.bestscore\n',
                           'm.bestscore()\n',
                           'm.best_factor()\n',
                           'm.best_factor\n',
                           'd = m.best_factor\n',
                           'd\n',
                           'm.summary\n',
                           'm.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n",
                           "s = '#laksdlkj'\n",
                           "s.startswith('#')l = \n",
                           'l=[1,2,3,4,5]\n',
                           'l.pop()\n',
                           'l.pop(0)\n',
                           'l.pop(-1)\n',
                           'l = [[1,2],[1,2],[1,2],[1,2]]\n',
                           'l\n',
                           'map(lambda l: l[1])\n',
                           'map(lambda i: i[1],l)\n',
                           'l = [1,4,5,646,7,9]\n',
                           'n = 45\n',
                           "n.astype('float')\n",
                           'd = [1,2,4,4,3,6,2,1,7,4,8,7,9,4,5,7,3,0,9,2,3,4'\
                           ']\n',
                           'numpy.histogram(d)\n',
                           'n,bins = numpy.histogram(d, bins=9, normed=1)\n',
                           'print numpy.__version__\n',
                           'print matplotlib.__version__\n',
                           'print numpy.histogram.__doc__\n',
                           'numpy\n',
                           'numpy.histogram2d.__doc__\n',
                           'print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #86'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #87'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #88'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'i = 6\n',
                           "s ='-minw 6 -maxw 18 '\n",
                           "if '-' in s:\n",
                           "if '-minw' and '-maxw' in s:\n",
                           "if '-minw' and '-maxr' in s:\n",
                           "\tprint 'y'\n",
                           'l = [1,2,3]\n',
                           'l[1:2]\n',
                           'l[1:3]\n',
                           'd = {1:3,2:4}\n',
                           'd = {1:"3",2:"4"}\n',
                           "''.join(d.values())\n",
                           "len(''.join(d.values()))\n",
                           'import sys\n',
                           'print os.listdir()\n',
                           "print os.listdir('')\n",
                           'os.path()\n',
                           'os.curdir()\n',
                           'os.curdir\n',
                           'os.path(0)\n',
                           'os.path[0]\n',
                           'os.path\n',
                           'sys.path(0)\n',
                           'sys.path[0]\n',
                           "d = '3'\n",
                           "print '%d' % (d)\n",
                           "print '%d' % (int(d))\n",
                           'from datetime import datetime\n',
                           'datetime()\n',
                           'from datetime import date\n',
                           'date.today\n',
                           'date.today()\n',
                           'print date.today()\n',
                           'date.ctime()\n',
                           'datetime.now()\n',
                           'datetime.time()\n',
                           'datetime.time(datetime.now())\n',
                           'import time\n',
                           'time.ctime()\n',
                           "time.ctime().replace(' ','_')\n",
                           'os.cwd()\n',
                           'sys.path\n',
                           "tF=open('TestingFile.txt','w')\n",
                           'str(tF)\n',
                           'import os\n',
                           'os.path(tF)\n',
                           'os.path.exists(tF)\n',
                           'os.path.realpath\n',
                           'os.path.realpath()\n',
                           'os.path.realpath(tF)\n',
                           'from TAMO.MD import Meme\n',
                           'from TAMO.MD.Meme import Meme\n',
                           'm = Meme()\n',
                           'm\n',
                           'm.lines\n',
                           'm._parse()\n',
                           'm.motifs\n',
                           'from TAMO.MotifMetrics import ProbeSet\n',
                           "pS = ProbeSet('/Users/biggus/Documents/James/Dat"\
                           "a/2KB/2kb_Sequence/2kb_Anopheles/2KBupTSS_goodAf"\
                           "fyAGAPsFastasOUT.masked.nr.fas')\n",
                           "coRegSeqs = '/Users/biggus/Documents/James/Data/"\
                           "ReClustering/kmedsPear33Clus50x_2/Clus2_247genes"\
                           ".genes.txt'\n",
                           "pS.matching_ids('',coRegSeqs,)\n",
                           "coRegSeqs = map(lambda l: l.strip(), open(coRegS"\
                           "eqs, 'rU').readlines())\n",
                           'coRegSeqs\n',
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.8)\n",
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.7)\n",
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.5)\n",
                           "pS.matching_ids('GATA',coRegSeqs, 0.5)\n",
                           'd = {}\n',
                           'type(d)\n',
                           "assert type(d) == 'dict', 'you ar ethe wrong typ"\
                           "e'\n",
                           'd.__class__\n',
                           'type(d.__class__)\n',
                           "assert type(d) is dict, 'you ar ethe wrong type'"\
                           "\n",
                           "assert type(d) is str, 'you ar ethe wrong type'\n",
                           "assert type(d) is str, 'you ar ethe wrong type'f"\
                           "rom \n",
                           'from MDAP_defs import shuffleSeqDict\n',
                           "d = {1:'why',2:'are ',3:'you wrong?'}\n",
                           'list(d[1])\n',
                           'd[1]\n',
                           'sD = shuffleSeqDict(d)\n',
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('TGATAACG')\n",
                           'm.bestscore\n',
                           'm.bestscore()\n',
                           'm.best_factor()\n',
                           'm.best_factor\n',
                           'd = m.best_factor\n',
                           'd\n',
                           'm.summary\n',
                           'm.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #89'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n',
                           'import random\n',
                           'random.choice(range(100))\n',
                           'random.choice(range(10,50))\n',
                           'l = [1,1,2,2,3,3,4,4,5,5]\n',
                           'zip(l)\n',
                           'zip(l,2)\n',
                           'odd\n',
                           'from JamesDefs import odd_or_even\n',
                           'odd_or_even(0)\n',
                           'l = [[1,1],[2,2],[3,3],[4,4],[5,5]]\n',
                           'l\n',
                           '[x[0] for x in l]\n',
                           'l = [[1,2],[3,2],[5,0],[0,0]]\n',
                           '[float(x[1])/(x[0]+x[1]) for x in l]\n',
                           'q=[0,0]\n',
                           'if q[0] and q[1] == 0:\n',
                           'if (q[0] and q[1]) == 0:\n',
                           "\tprint 'y'\n",
                           '[if (x[0] and x[1])!=0:float(x[1])/(x[0]+x[1]);e'\
                           'lse:0 for x in l]\n',
                           '[float(x[1])/(x[0]+x[1]) for x in l if (x[0] and'\
                           ' x[1])!=0 else 0]\n',
                           '[(float(x[1])/(x[0]+x[1]),0) for x in l if (x[0]'\
                           ' and x[1])!=0]\n',
                           '[(float(x[1])/(x[0]+x[1]),0) [bool((x[0] and x[1'\
                           '])!=0)]for x in l]\n',
                           '[(float(x[1])/(x[0]+x[1]),x[0]) [bool((x[0] and '\
                           'x[1])!=0)]for x in l]\n',
                           '[((float(x[1])/(x[0]+x[1])),x[0]) [bool((x[0] an'\
                           'd x[1])!=0)]for x in l]\n',
                           '[(i-2, i+2)[bool(i%2 == 0)] for i in range(10)]\n',
                           '[((float(x[1])/(x[0]+x[1])),x[0]+0) [bool((x[0] '\
                           'and x[1])!=0)]for x in l]\n',
                           '[(x[0],(float(x[1])/(x[0]+x[1]))) [bool((x[0] an'\
                           'd x[1])!=0)]for x in l]\n',
                           '[1,3,2]+[6,7,8]\n',
                           "eval('[]'*3)\n",
                           "eval('[%s]'%('[],'*3))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #90'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #91'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #92'): {'attrib-starts': [('m'\
        'yList',
        0),
        ('myList.__init__',
         2)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 25,
        'selection_end': 47,
        'selection_start': 47},
                       loc('unknown:<untitled> #93'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'i = 6\n',
                           "s ='-minw 6 -maxw 18 '\n",
                           "if '-' in s:\n",
                           "if '-minw' and '-maxw' in s:\n",
                           "if '-minw' and '-maxr' in s:\n",
                           "\tprint 'y'\n",
                           'l = [1,2,3]\n',
                           'l[1:2]\n',
                           'l[1:3]\n',
                           'd = {1:3,2:4}\n',
                           'd = {1:"3",2:"4"}\n',
                           "''.join(d.values())\n",
                           "len(''.join(d.values()))\n",
                           'import sys\n',
                           'print os.listdir()\n',
                           "print os.listdir('')\n",
                           'os.path()\n',
                           'os.curdir()\n',
                           'os.curdir\n',
                           'os.path(0)\n',
                           'os.path[0]\n',
                           'os.path\n',
                           'sys.path(0)\n',
                           'sys.path[0]\n',
                           "d = '3'\n",
                           "print '%d' % (d)\n",
                           "print '%d' % (int(d))\n",
                           'from datetime import datetime\n',
                           'datetime()\n',
                           'from datetime import date\n',
                           'date.today\n',
                           'date.today()\n',
                           'print date.today()\n',
                           'date.ctime()\n',
                           'datetime.now()\n',
                           'datetime.time()\n',
                           'datetime.time(datetime.now())\n',
                           'import time\n',
                           'time.ctime()\n',
                           "time.ctime().replace(' ','_')\n",
                           'os.cwd()\n',
                           'sys.path\n',
                           "tF=open('TestingFile.txt','w')\n",
                           'str(tF)\n',
                           'import os\n',
                           'os.path(tF)\n',
                           'os.path.exists(tF)\n',
                           'os.path.realpath\n',
                           'os.path.realpath()\n',
                           'os.path.realpath(tF)\n',
                           'from TAMO.MD import Meme\n',
                           'from TAMO.MD.Meme import Meme\n',
                           'm = Meme()\n',
                           'm\n',
                           'm.lines\n',
                           'm._parse()\n',
                           'm.motifs\n',
                           'from TAMO.MotifMetrics import ProbeSet\n',
                           "pS = ProbeSet('/Users/biggus/Documents/James/Dat"\
                           "a/2KB/2kb_Sequence/2kb_Anopheles/2KBupTSS_goodAf"\
                           "fyAGAPsFastasOUT.masked.nr.fas')\n",
                           "coRegSeqs = '/Users/biggus/Documents/James/Data/"\
                           "ReClustering/kmedsPear33Clus50x_2/Clus2_247genes"\
                           ".genes.txt'\n",
                           "pS.matching_ids('',coRegSeqs,)\n",
                           "coRegSeqs = map(lambda l: l.strip(), open(coRegS"\
                           "eqs, 'rU').readlines())\n",
                           'coRegSeqs\n',
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.8)\n",
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.7)\n",
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.5)\n",
                           "pS.matching_ids('GATA',coRegSeqs, 0.5)\n",
                           'd = {}\n',
                           'type(d)\n',
                           "assert type(d) == 'dict', 'you ar ethe wrong typ"\
                           "e'\n",
                           'd.__class__\n',
                           'type(d.__class__)\n',
                           "assert type(d) is dict, 'you ar ethe wrong type'"\
                           "\n",
                           "assert type(d) is str, 'you ar ethe wrong type'\n",
                           "assert type(d) is str, 'you ar ethe wrong type'f"\
                           "rom \n",
                           'from MDAP_defs import shuffleSeqDict\n',
                           "d = {1:'why',2:'are ',3:'you wrong?'}\n",
                           'list(d[1])\n',
                           'd[1]\n',
                           'sD = shuffleSeqDict(d)\n',
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('TGATAACG')\n",
                           'm.bestscore\n',
                           'm.bestscore()\n',
                           'm.best_factor()\n',
                           'm.best_factor\n',
                           'd = m.best_factor\n',
                           'd\n',
                           'm.summary\n',
                           'm.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #94'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 35,
        'selection_end': 35,
        'selection_start': 35},
                       loc('unknown:<untitled> #95'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n',
                           'import random\n',
                           'random.choice(range(100))\n',
                           'random.choice(range(10,50))\n',
                           'l = [1,1,2,2,3,3,4,4,5,5]\n',
                           'zip(l)\n',
                           'zip(l,2)\n',
                           'odd\n',
                           'from JamesDefs import odd_or_even\n',
                           'odd_or_even(0)\n',
                           'l = [[1,1],[2,2],[3,3],[4,4],[5,5]]\n',
                           'l\n',
                           '[x[0] for x in l]\n',
                           'l = [[1,2],[3,2],[5,0],[0,0]]\n',
                           '[float(x[1])/(x[0]+x[1]) for x in l]\n',
                           'q=[0,0]\n',
                           'if q[0] and q[1] == 0:\n',
                           'if (q[0] and q[1]) == 0:\n',
                           "\tprint 'y'\n",
                           '[if (x[0] and x[1])!=0:float(x[1])/(x[0]+x[1]);e'\
                           'lse:0 for x in l]\n',
                           '[float(x[1])/(x[0]+x[1]) for x in l if (x[0] and'\
                           ' x[1])!=0 else 0]\n',
                           '[(float(x[1])/(x[0]+x[1]),0) for x in l if (x[0]'\
                           ' and x[1])!=0]\n',
                           '[(float(x[1])/(x[0]+x[1]),0) [bool((x[0] and x[1'\
                           '])!=0)]for x in l]\n',
                           '[(float(x[1])/(x[0]+x[1]),x[0]) [bool((x[0] and '\
                           'x[1])!=0)]for x in l]\n',
                           '[((float(x[1])/(x[0]+x[1])),x[0]) [bool((x[0] an'\
                           'd x[1])!=0)]for x in l]\n',
                           '[(i-2, i+2)[bool(i%2 == 0)] for i in range(10)]\n',
                           '[((float(x[1])/(x[0]+x[1])),x[0]+0) [bool((x[0] '\
                           'and x[1])!=0)]for x in l]\n',
                           '[(x[0],(float(x[1])/(x[0]+x[1]))) [bool((x[0] an'\
                           'd x[1])!=0)]for x in l]\n',
                           '[1,3,2]+[6,7,8]\n',
                           "eval('[]'*3)\n",
                           "eval('[%s]'%('[],'*3))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #96'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #97'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #98'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #99'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #100'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n',
                           'import random\n',
                           'random.choice(range(100))\n',
                           'random.choice(range(10,50))\n',
                           'l = [1,1,2,2,3,3,4,4,5,5]\n',
                           'zip(l)\n',
                           'zip(l,2)\n',
                           'odd\n',
                           'from JamesDefs import odd_or_even\n',
                           'odd_or_even(0)\n',
                           'l = [[1,1],[2,2],[3,3],[4,4],[5,5]]\n',
                           'l\n',
                           '[x[0] for x in l]\n',
                           'l = [[1,2],[3,2],[5,0],[0,0]]\n',
                           '[float(x[1])/(x[0]+x[1]) for x in l]\n',
                           'q=[0,0]\n',
                           'if q[0] and q[1] == 0:\n',
                           'if (q[0] and q[1]) == 0:\n',
                           "\tprint 'y'\n",
                           '[if (x[0] and x[1])!=0:float(x[1])/(x[0]+x[1]);e'\
                           'lse:0 for x in l]\n',
                           '[float(x[1])/(x[0]+x[1]) for x in l if (x[0] and'\
                           ' x[1])!=0 else 0]\n',
                           '[(float(x[1])/(x[0]+x[1]),0) for x in l if (x[0]'\
                           ' and x[1])!=0]\n',
                           '[(float(x[1])/(x[0]+x[1]),0) [bool((x[0] and x[1'\
                           '])!=0)]for x in l]\n',
                           '[(float(x[1])/(x[0]+x[1]),x[0]) [bool((x[0] and '\
                           'x[1])!=0)]for x in l]\n',
                           '[((float(x[1])/(x[0]+x[1])),x[0]) [bool((x[0] an'\
                           'd x[1])!=0)]for x in l]\n',
                           '[(i-2, i+2)[bool(i%2 == 0)] for i in range(10)]\n',
                           '[((float(x[1])/(x[0]+x[1])),x[0]+0) [bool((x[0] '\
                           'and x[1])!=0)]for x in l]\n',
                           '[(x[0],(float(x[1])/(x[0]+x[1]))) [bool((x[0] an'\
                           'd x[1])!=0)]for x in l]\n',
                           '[1,3,2]+[6,7,8]\n',
                           "eval('[]'*3)\n",
                           "eval('[%s]'%('[],'*3))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #101'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #102'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #7'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'from TAMO.MotifTools import Motif\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n",
                           'from TAMO.MD import MDscan\n',
                           'mdScanObj = MDscan()\n',
                           'mdScanObj = MDscan.MDscan()\n',
                           "s = 'fileNPath'\n",
                           "s.split(';')\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #12'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #14'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #6'): {'attrib-starts': [('ce'\
        'll',
        0),
        ('cell.__init__',
         1)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 78,
        'selection_end': 86,
        'selection_start': 86},
                       loc('unknown:<untitled> #15'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #13'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #11'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #9'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #10'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #8'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #16'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 10,
        'selection_end': 10,
        'selection_start': 10},
                       loc('unknown:<untitled> #17'): {'attrib-starts': [],
        'first-line': 2,
        'folded-linenos': [],
        'history': {None: ["s = '#laksdlkj'\n",
                           "s.startswith('#')l = \n",
                           'l=[1,2,3,4,5]\n',
                           'l.pop()\n',
                           'l.pop(0)\n',
                           'l.pop(-1)\n',
                           'l = [[1,2],[1,2],[1,2],[1,2]]\n',
                           'l\n',
                           'map(lambda l: l[1])\n',
                           'map(lambda i: i[1],l)\n',
                           'l = [1,4,5,646,7,9]\n',
                           'n = 45\n',
                           "n.astype('float')\n",
                           'd = [1,2,4,4,3,6,2,1,7,4,8,7,9,4,5,7,3,0,9,2,3,4'\
                           ']\n',
                           'numpy.histogram(d)\n',
                           'n,bins = numpy.histogram(d, bins=9, normed=1)\n',
                           'print numpy.__version__\n',
                           'print matplotlib.__version__\n',
                           'print numpy.histogram.__doc__\n',
                           'numpy\n',
                           'numpy.histogram2d.__doc__\n',
                           'print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n',
                           'import random\n',
                           'random.choice(range(100))\n',
                           'random.choice(range(10,50))\n',
                           'l = [1,1,2,2,3,3,4,4,5,5]\n',
                           'zip(l)\n',
                           'zip(l,2)\n',
                           'odd\n',
                           'from JamesDefs import odd_or_even\n',
                           'odd_or_even(0)\n']},
        'sel-line': 6,
        'sel-line-start': 231,
        'selection_end': 235,
        'selection_start': 235},
                       loc('unknown:<untitled> #18'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #19'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #20'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 2,
        'sel-line-start': 308,
        'selection_end': 308,
        'selection_start': 308},
                       loc('unknown:<untitled> #21'): {'attrib-starts': [],
        'first-line': 16,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 133,
        'sel-line-start': 2511,
        'selection_end': 2511,
        'selection_start': 2511},
                       loc('unknown:<untitled> #22'): {'attrib-starts': [],
        'first-line': 2,
        'folded-linenos': [],
        'history': {None: ['np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'from TAMO.MotifTools import Motif\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n",
                           'from TAMO.MD import MDscan\n',
                           'mdScanObj = MDscan()\n',
                           'mdScanObj = MDscan.MDscan()\n']},
        'sel-line': 9,
        'sel-line-start': 372,
        'selection_end': 378,
        'selection_start': 378},
                       loc('unknown:<untitled> #23'): {'attrib-starts': [],
        'first-line': 0,
        'history': {},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #24'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #25'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #26'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 2,
        'sel-line-start': 308,
        'selection_end': 2329,
        'selection_start': 308},
                       loc('unknown:<untitled> #27'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 2,
        'sel-line-start': 308,
        'selection_end': 308,
        'selection_start': 308},
                       loc('unknown:<untitled> #28'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'from TAMO.MotifTools import Motif\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #29'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ["\tprint 'yes'\n",
                           'else:\n',
                           "\tprint 'no'\n",
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('WGATAR')\n",
                           'm\n',
                           'r = m.revcomp()\n',
                           'r.re\n',
                           'm = 1\n',
                           'r = 8\n',
                           'min([m,r])\n',
                           "l = [['f',2],['r',1],['a',9]]\n",
                           "l = [[2, 'f'], [1, 'r'], [9,'a']]\n",
                           'l.sort\n',
                           'l.sort()\n',
                           'l.reverse()\n',
                           'from numpy import correlate\n',
                           'x = [1,2,3,4,1]\n',
                           'y1 = [1,2,3,4,5]\n',
                           'y2 = [1*3,2*3,3*3,4*3,1*3]\n',
                           'y1 = x.reverse()\n',
                           'x.reverse()\n',
                           'y1 = x[::-1]\n',
                           'y2\n',
                           'x = array(x)\n',
                           'y1 = array(y1)\n',
                           'y2 = array(y2)\n',
                           'for i in [x,y1,y2]:\n',
                           '\tprint i\n',
                           "x_x = correlate(x,x,'pearson')\n",
                           "x_x = correlate(x,x,mode='pearson')\n",
                           'from scipy import stat\n',
                           'from scipy import stats\n',
                           'stats.stats.pearsonr([1,2,3],[3,2,1])\n',
                           'stats.stats.pearsonr(x,y1)\n',
                           'y1\n',
                           'stats.stats.pearsonr(x,y2)\n',
                           'import numpy as np\n',
                           'np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #30'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ["\tprint 'yes'\n",
                           'else:\n',
                           "\tprint 'no'\n",
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('WGATAR')\n",
                           'm\n',
                           'r = m.revcomp()\n',
                           'r.re\n',
                           'm = 1\n',
                           'r = 8\n',
                           'min([m,r])\n',
                           "l = [['f',2],['r',1],['a',9]]\n",
                           "l = [[2, 'f'], [1, 'r'], [9,'a']]\n",
                           'l.sort\n',
                           'l.sort()\n',
                           'l.reverse()\n',
                           'from numpy import correlate\n',
                           'x = [1,2,3,4,1]\n',
                           'y1 = [1,2,3,4,5]\n',
                           'y2 = [1*3,2*3,3*3,4*3,1*3]\n',
                           'y1 = x.reverse()\n',
                           'x.reverse()\n',
                           'y1 = x[::-1]\n',
                           'y2\n',
                           'x = array(x)\n',
                           'y1 = array(y1)\n',
                           'y2 = array(y2)\n',
                           'for i in [x,y1,y2]:\n',
                           '\tprint i\n',
                           "x_x = correlate(x,x,'pearson')\n",
                           "x_x = correlate(x,x,mode='pearson')\n",
                           'from scipy import stat\n',
                           'from scipy import stats\n',
                           'stats.stats.pearsonr([1,2,3],[3,2,1])\n',
                           'stats.stats.pearsonr(x,y1)\n',
                           'y1\n',
                           'stats.stats.pearsonr(x,y2)\n',
                           'import numpy as np\n',
                           'np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 191,
        'selection_start': 191},
                       loc('unknown:<untitled> #31'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 2,
        'sel-line-start': 308,
        'selection_end': 308,
        'selection_start': 308},
                       loc('unknown:<untitled> #32'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #33'): {'attrib-starts': [('i'\
        'upac2regex',
        0)],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 443,
        'selection_start': 0},
                       loc('unknown:<untitled> #34'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n',
                           'import random\n',
                           'random.choice(range(100))\n',
                           'random.choice(range(10,50))\n',
                           'l = [1,1,2,2,3,3,4,4,5,5]\n',
                           'zip(l)\n',
                           'zip(l,2)\n',
                           'odd\n',
                           'from JamesDefs import odd_or_even\n',
                           'odd_or_even(0)\n',
                           'l = [[1,1],[2,2],[3,3],[4,4],[5,5]]\n',
                           'l\n',
                           '[x[0] for x in l]\n',
                           'l = [[1,2],[3,2],[5,0],[0,0]]\n',
                           '[float(x[1])/(x[0]+x[1]) for x in l]\n',
                           'q=[0,0]\n',
                           'if q[0] and q[1] == 0:\n',
                           'if (q[0] and q[1]) == 0:\n',
                           "\tprint 'y'\n",
                           '[if (x[0] and x[1])!=0:float(x[1])/(x[0]+x[1]);e'\
                           'lse:0 for x in l]\n',
                           '[float(x[1])/(x[0]+x[1]) for x in l if (x[0] and'\
                           ' x[1])!=0 else 0]\n',
                           '[(float(x[1])/(x[0]+x[1]),0) for x in l if (x[0]'\
                           ' and x[1])!=0]\n',
                           '[(float(x[1])/(x[0]+x[1]),0) [bool((x[0] and x[1'\
                           '])!=0)]for x in l]\n',
                           '[(float(x[1])/(x[0]+x[1]),x[0]) [bool((x[0] and '\
                           'x[1])!=0)]for x in l]\n',
                           '[((float(x[1])/(x[0]+x[1])),x[0]) [bool((x[0] an'\
                           'd x[1])!=0)]for x in l]\n',
                           '[(i-2, i+2)[bool(i%2 == 0)] for i in range(10)]\n',
                           '[((float(x[1])/(x[0]+x[1])),x[0]+0) [bool((x[0] '\
                           'and x[1])!=0)]for x in l]\n',
                           '[(x[0],(float(x[1])/(x[0]+x[1]))) [bool((x[0] an'\
                           'd x[1])!=0)]for x in l]\n',
                           '[1,3,2]+[6,7,8]\n',
                           "eval('[]'*3)\n",
                           "eval('[%s]'%('[],'*3))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #35'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #36'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #37'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #38'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['d = m.best_factor\n',
                           'd\n',
                           'm.summary\n',
                           'm.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n",
                           "s = '#laksdlkj'\n",
                           "s.startswith('#')l = \n",
                           'l=[1,2,3,4,5]\n',
                           'l.pop()\n',
                           'l.pop(0)\n',
                           'l.pop(-1)\n',
                           'l = [[1,2],[1,2],[1,2],[1,2]]\n',
                           'l\n',
                           'map(lambda l: l[1])\n',
                           'map(lambda i: i[1],l)\n',
                           'l = [1,4,5,646,7,9]\n',
                           'n = 45\n',
                           "n.astype('float')\n",
                           'd = [1,2,4,4,3,6,2,1,7,4,8,7,9,4,5,7,3,0,9,2,3,4'\
                           ']\n',
                           'numpy.histogram(d)\n',
                           'n,bins = numpy.histogram(d, bins=9, normed=1)\n',
                           'print numpy.__version__\n',
                           'print matplotlib.__version__\n',
                           'print numpy.histogram.__doc__\n',
                           'numpy\n',
                           'numpy.histogram2d.__doc__\n',
                           'print numpy.histogram2d.__doc__\n',
                           'print numpy.histogramdd.__doc__\n',
                           'r = np.random.randn(100,3)\n',
                           'H, edges = np.histogramdd(r, bins = (5, 8, 4))\n',
                           'H.shape, edges[0].size, edges[1].size, edges[2].'\
                           'size\n',
                           'import matplotlib as mpl\n',
                           'import matplotlib.pyplot as plt\n',
                           'import matplotlib.pylab as plb\n',
                           'plb.plot(edges.H)\n',
                           'plb.plot(edges,H)\n',
                           'a = numpy.array([2,3,0.786])\n',
                           'l = [0,1,2,3,4]\n',
                           'l[:-1]\n',
                           'type(type(3))\n',
                           'type(str(type(3)))\n',
                           'if type(5) == type(45):\n',
                           "\tprint 'ok'\n",
                           'import matplotlib.pyplot as pl\n',
                           'print pl.xscale.__doc__\n',
                           "pl.xscale('log')\n",
                           'pl.show()\n',
                           'a = np.array([1,2,3,4,2,3,2])\n',
                           'a\n',
                           'a.dtype\n',
                           'a.dtype()\n',
                           "f = np.array(a,dtype='float_')\n",
                           'f\n',
                           'np.math.log10(1200)\n',
                           'np.math.log2(1200)\n',
                           'np.math.log(1200)\n',
                           'import matplotlib\n',
                           'matplotlib.__version__\n',
                           'l = [[1,2],[-1,234]]\n',
                           'max(l)\n',
                           'min(l)\n',
                           'l[1].index(234)\n',
                           'import numpy and np\n',
                           'import numpy as np\n',
                           'a = np.array([1,3,5,4,33])\n',
                           'a.max\n',
                           'a.max()\n',
                           'a.view\n',
                           'a.view()\n',
                           'a.argmax()\n',
                           'import math\n',
                           'math.log(4.383)\n',
                           'math.log10(4.383)\n',
                           "testFile = open('testFile.txt','w')\n",
                           'l = [1,2,3,4,5,6,7,8,9]\n',
                           "l = ['8','7','6','5','4','3','2','1']\n",
                           'testFile.writelines(l)\n',
                           'testFile.close()\n',
                           'class t:\n',
                           '\timport numpy as np\n',
                           'np\n',
                           'r = t\n',
                           'import numpy\n',
                           "numpy.log10('2.85E-003')\n",
                           "numpy.log10(float('2.85E-003'))\n",
                           "numpy.log10(float('gh'))\n",
                           'n = None\n',
                           'n\n',
                           'float(n)\n',
                           '3^2\n',
                           '3**2\n',
                           'def t(motifNum):\n',
                           '\tperMap = 0.036486(motifNum)-0.001354\n',
                           "\treturn '%.3f days.'% (perMap * 8641 /60/60.0)\n",
                           't(12)\n',
                           't\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #39'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'from TAMO.MotifTools import Motif\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #40'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'i = 6\n',
                           "s ='-minw 6 -maxw 18 '\n",
                           "if '-' in s:\n",
                           "if '-minw' and '-maxw' in s:\n",
                           "if '-minw' and '-maxr' in s:\n",
                           "\tprint 'y'\n",
                           'l = [1,2,3]\n',
                           'l[1:2]\n',
                           'l[1:3]\n',
                           'd = {1:3,2:4}\n',
                           'd = {1:"3",2:"4"}\n',
                           "''.join(d.values())\n",
                           "len(''.join(d.values()))\n",
                           'import sys\n',
                           'print os.listdir()\n',
                           "print os.listdir('')\n",
                           'os.path()\n',
                           'os.curdir()\n',
                           'os.curdir\n',
                           'os.path(0)\n',
                           'os.path[0]\n',
                           'os.path\n',
                           'sys.path(0)\n',
                           'sys.path[0]\n',
                           "d = '3'\n",
                           "print '%d' % (d)\n",
                           "print '%d' % (int(d))\n",
                           'from datetime import datetime\n',
                           'datetime()\n',
                           'from datetime import date\n',
                           'date.today\n',
                           'date.today()\n',
                           'print date.today()\n',
                           'date.ctime()\n',
                           'datetime.now()\n',
                           'datetime.time()\n',
                           'datetime.time(datetime.now())\n',
                           'import time\n',
                           'time.ctime()\n',
                           "time.ctime().replace(' ','_')\n",
                           'os.cwd()\n',
                           'sys.path\n',
                           "tF=open('TestingFile.txt','w')\n",
                           'str(tF)\n',
                           'import os\n',
                           'os.path(tF)\n',
                           'os.path.exists(tF)\n',
                           'os.path.realpath\n',
                           'os.path.realpath()\n',
                           'os.path.realpath(tF)\n',
                           'from TAMO.MD import Meme\n',
                           'from TAMO.MD.Meme import Meme\n',
                           'm = Meme()\n',
                           'm\n',
                           'm.lines\n',
                           'm._parse()\n',
                           'm.motifs\n',
                           'from TAMO.MotifMetrics import ProbeSet\n',
                           "pS = ProbeSet('/Users/biggus/Documents/James/Dat"\
                           "a/2KB/2kb_Sequence/2kb_Anopheles/2KBupTSS_goodAf"\
                           "fyAGAPsFastasOUT.masked.nr.fas')\n",
                           "coRegSeqs = '/Users/biggus/Documents/James/Data/"\
                           "ReClustering/kmedsPear33Clus50x_2/Clus2_247genes"\
                           ".genes.txt'\n",
                           "pS.matching_ids('',coRegSeqs,)\n",
                           "coRegSeqs = map(lambda l: l.strip(), open(coRegS"\
                           "eqs, 'rU').readlines())\n",
                           'coRegSeqs\n',
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.8)\n",
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.7)\n",
                           "pS.matching_ids('AKcGaGgtGsT.kGyTTgggarGmGATTGCG"\
                           "AASaGrTTGgCAAAAAAMG',coRegSeqs, 0.5)\n",
                           "pS.matching_ids('GATA',coRegSeqs, 0.5)\n",
                           'd = {}\n',
                           'type(d)\n',
                           "assert type(d) == 'dict', 'you ar ethe wrong typ"\
                           "e'\n",
                           'd.__class__\n',
                           'type(d.__class__)\n',
                           "assert type(d) is dict, 'you ar ethe wrong type'"\
                           "\n",
                           "assert type(d) is str, 'you ar ethe wrong type'\n",
                           "assert type(d) is str, 'you ar ethe wrong type'f"\
                           "rom \n",
                           'from MDAP_defs import shuffleSeqDict\n',
                           "d = {1:'why',2:'are ',3:'you wrong?'}\n",
                           'list(d[1])\n',
                           'd[1]\n',
                           'sD = shuffleSeqDict(d)\n',
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('TGATAACG')\n",
                           'm.bestscore\n',
                           'm.bestscore()\n',
                           'm.best_factor()\n',
                           'm.best_factor\n',
                           'd = m.best_factor\n',
                           'd\n',
                           'm.summary\n',
                           'm.summary()\n',
                           'm.bestscore(m)\n',
                           'm.bestscore(m.oneletter)\n',
                           "m.bestscore('TGATAACC')\n",
                           "s = 'AACTGCANACTGACNNNACTGATGNNN'\n",
                           "s.replace('N','')\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #41'): {'attrib-starts': [],
        'first-line': 37,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 1375,
        'selection_start': 0},
                       loc('unknown:<untitled> #42'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #43'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'from TAMO.MotifTools import Motif\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #44'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ["\tprint 'yes'\n",
                           'else:\n',
                           "\tprint 'no'\n",
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('WGATAR')\n",
                           'm\n',
                           'r = m.revcomp()\n',
                           'r.re\n',
                           'm = 1\n',
                           'r = 8\n',
                           'min([m,r])\n',
                           "l = [['f',2],['r',1],['a',9]]\n",
                           "l = [[2, 'f'], [1, 'r'], [9,'a']]\n",
                           'l.sort\n',
                           'l.sort()\n',
                           'l.reverse()\n',
                           'from numpy import correlate\n',
                           'x = [1,2,3,4,1]\n',
                           'y1 = [1,2,3,4,5]\n',
                           'y2 = [1*3,2*3,3*3,4*3,1*3]\n',
                           'y1 = x.reverse()\n',
                           'x.reverse()\n',
                           'y1 = x[::-1]\n',
                           'y2\n',
                           'x = array(x)\n',
                           'y1 = array(y1)\n',
                           'y2 = array(y2)\n',
                           'for i in [x,y1,y2]:\n',
                           '\tprint i\n',
                           "x_x = correlate(x,x,'pearson')\n",
                           "x_x = correlate(x,x,mode='pearson')\n",
                           'from scipy import stat\n',
                           'from scipy import stats\n',
                           'stats.stats.pearsonr([1,2,3],[3,2,1])\n',
                           'stats.stats.pearsonr(x,y1)\n',
                           'y1\n',
                           'stats.stats.pearsonr(x,y2)\n',
                           'import numpy as np\n',
                           'np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #45'): {'attrib-starts': [('b'\
        'estIdentOverLen',
        0)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 197,
        'selection_start': 0},
                       loc('unknown:<untitled> #46'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ['np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n',
                           'from TAMO import MotifTools\n',
                           'from TAMO.Clustering import MotifCompare\n',
                           "m1 = MotifTools.Motif('WGATAR')\n",
                           "m2 = MotifTools.Motif('YTATCS')\n",
                           'MotifCompare(m1,m1)\n',
                           "m2 = MotifTools.Motif('YTATCW')\n",
                           "m2 = MotifTools.Motif('TTATCC')\n",
                           "m1 = MotifTools.Motif('GGATAA')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m2.revco'\
                           'mp())\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m1)\n',
                           'm2\n',
                           'm1 == m1\n',
                           'm1 == m2\n',
                           'import cop\n',
                           'import copy\n',
                           'm3 = copy(m1)\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m2)\n',
                           'm1.oneletter\n',
                           'm3 = MotifTools.Motif(m1.oneletter)\n',
                           'm3\n',
                           'm1 == m3\n',
                           'MotifCompare.minshortestoverhangdiff(m1,m3)\n',
                           'm2.revcomp()\n',
                           'm1.oneletter == m2.revcomp().oneletter\n',
                           'from TAMO.MotifTools import Motif\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp()))\n',
                           'MotifCompare.minshortestoverhangdiff(m1,Motif(m2'\
                           '.revcomp().oneletter))\n',
                           'm1\n',
                           "m4 = Motif('GGATAT')\n",
                           'MotifCompare.minshortestoverhangdiff(m1,m4)\n',
                           "m4 = Motif('GGATTA')\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATTA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACCA'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGATAAT'))\n",
                           "MotifCompare.minshortestoverhangdiff(Motif('GGAT"\
                           "AA'),Motif('GGACTAAT'))\n"]},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #47'): {'attrib-starts': [],
        'first-line': 0,
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #48'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 410,
        'selection_end': 414,
        'selection_start': 414},
                       loc('unknown:<untitled> #49'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #50'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0}}
debug.breakpoints = {loc('!simpleScripts/gcContentOfFastas.py'): {48: (0,
        None,
        1,
        0)},
                      loc('!simpleScripts/getKmersInAllSeqs.py'): {38: (0,
        None,
        1,
        0)},
                      loc('!simpleScripts/interrogatePickles.py'): {8: (0,
        None,
        1,
        0)},
                      loc('!simpleScripts/testOverlapRegEx.py'): {14: (0,
        None,
        1,
        0)},
                      loc('!simpleScripts/testTAMObackground.py'): {3: (0,
        None,
        1,
        0)},
                      loc('!simpleScripts/timeMeme.py'): {6: (0,
        None,
        1,
        0)},
                      loc('!simpleScripts/whichSeqsHaveEachKmer.py'): {33: (0,
        None,
        1,
        0)},
                      loc('0_prototyping/addRvCmpNumbers4Doug.py'): {35: (0,
        None,
        1,
        0)},
                      loc('0_prototyping/benjHochFDR.py'): {87: (0,
        None,
        1,
        0)},
                      loc('0_prototyping/groupKeysByIntersect.py'): {26: (0,
        None,
        1,
        0)},
                      loc('0_prototyping/test_appendListInLoop_refOrReal.py'): {10: (0,
        None,
        1,
        0)},
                      loc('0_prototyping/test_setInSetOfSets.py'): {10: (0,
        None,
        1,
        0),
        16: (0,
             None,
             1,
             0)},
                      loc('0_prototyping/testingSciPyHypergeo.py'): {22: (0,
        None,
        1,
        0)},
                      loc('BackUpFiles/fjoinConfilctResolver.bak2.py'): {49: (0,
        None,
        1,
        0),
        66: (0,
             None,
             1,
             0)},
                      loc('LearningTAMO/motifToolsSum.py'): {22: (0,
        None,
        1,
        0)},
                      loc('LearningTAMO/randomizing.py'): {10: (0,
        None,
        1,
        0)},
                      loc('LearningTAMO/runMetaAce.py'): {12: (0,
        None,
        1,
        0)},
                      loc('LearningTAMO/testingMDscan.py'): {24: (0,
        None,
        1,
        0)},
                      loc('MDAP_proj/GEMSlikePWM.py'): {107: (0,
        None,
        1,
        0)},
                      loc('MDAP_proj/MarkovBackground.py'): {48: (0,
        None,
        1,
        0)},
                      loc('MDAP_proj/analyzeFromTAMOpickles.py'): {36: (0,
        None,
        1,
        0)},
                      loc('MDAP_proj/changing_AlignSimMotifs.py'): {69: (0,
        None,
        1,
        0)},
                      loc('MDAP_proj/combine_a_few_motifs.py'): {22: (0,
        None,
        1,
        0),
        23: (0,
             None,
             1,
             0),
        25: (0,
             None,
             1,
             0)},
                      loc('MDAP_proj/getRandPromoters.py'): {26: (0,
        None,
        1,
        0),
        27: (0,
             None,
             1,
             0)},
                      loc('MDAP_proj/test_alignAndCombine.py'): {29: (0,
        None,
        1,
        0)},
                      loc('MDAP_proj/test_findBestPairAlignments.py'): {15: (0,
        None,
        1,
        0)},
                      loc('MDOSX_proj/MDOSX_defs/MDOSX_classes.py'): {39: (0,
        None,
        1,
        0),
        41: (0,
             None,
             1,
             0)},
                      loc('MDOSX_proj/MDOSX_defs/defs.py'): {16: (0,
        None,
        1,
        0),
        18: (0,
             None,
             1,
             0)},
                      loc('MDOSX_proj/test_buildCoRegdOrthoGroups.py'): {12: (0,
        None,
        1,
        0)},
                      loc('MDOSX_proj/test_combineOrthoTabsJamesDefs.py'): {35: (0,
        None,
        1,
        0),
        37: (0,
             None,
             1,
             0)},
                      loc('MDOSX_proj/test_orthoSets.py'): {16: (0,
        None,
        1,
        0)},
                      loc('MDOSX_proj/test_searchOrthoGroups.py'): {27: (0,
        None,
        1,
        0)},
                      loc('MDOSX_proj/test_spawnOrthoGroups.py'): {16: (0,
        None,
        1,
        0)},
                      loc('ModuleDiscovery/biggerComboParamsFromMatrix.py'): {28: (0,
        None,
        1,
        0),
        30: (0,
             None,
             1,
             0),
        44: (0,
             None,
             1,
             0)},
                      loc('ModuleDiscovery/buildModulesFromMap.py'): {95: (0,
        None,
        1,
        0)},
                      loc('ModuleDiscovery/dev_motifPairs_buildModulesFromMap.py'): {202: (0,
        None,
        1,
        0),
        208: (0,
              None,
              1,
              0)},
                      loc('ModuleDiscovery/moduleMapDefs.bak.py'): {48: (0,
        None,
        1,
        0)},
                      loc('ModuleDiscovery/moduleMapDefs.py'): {121: (0,
        None,
        1,
        0)},
                      loc('ModuleDiscovery/sparePartsFromClusterHyperGeo.py'): {97: (0,
        None,
        1,
        0)},
                      loc('Tu_miRNA/barBoxFromPickles.py'): {90: (0,
        None,
        1,
        0)},
                      loc('Tu_miRNA/countAndSaveSeedMatchObjspy'): {61: (0,
        None,
        1,
        0),
        98: (0,
             None,
             1,
             0),
        127: (0,
              None,
              1,
              0)},
                      loc('Tu_miRNA/countHItsIn_N_orthologs.py'): {14: (0,
        None,
        1,
        0)},
                      loc('Tu_miRNA/counts4AllThree.py'): {69: (0,
        None,
        1,
        0),
        71: (0,
             None,
             1,
             0)},
                      loc('Tu_miRNA/targetingAllInOne.py'): {35: (0,
        None,
        1,
        0)},
                      loc('Tu_miRNA/test_pickledSeeds.py'): {48: (0,
        None,
        1,
        0)},
                      loc('Tu_miRNA/test_seedObj.py'): {58: (0,
        None,
        1,
        0),
        98: (0,
             None,
             1,
             0),
        127: (0,
              None,
              1,
              0)},
                      loc('Tu_miRNA/test_seedObjVariations.py'): {60: (0,
        None,
        1,
        0),
        97: (0,
             None,
             1,
             0),
        126: (0,
              None,
              1,
              0)},
                      loc('collapseMotifsOnRevComp.py'): {45: (0,
        None,
        1,
        0),
        46: (0,
             None,
             1,
             0),
        51: (0,
             None,
             1,
             0),
        73: (0,
             None,
             1,
             0)},
                      loc('convertFastaNames.py'): {43: (0,
        None,
        1,
        0)},
                      loc('corePromoterStuff/count2MotifsConstrainedDist.py'): {39: (0,
        None,
        1,
        0)},
                      loc('defs/developingDefs.py'): {17: (0,
        None,
        1,
        0)},
                      loc('defs/testingADef.py'): {9: (0,
        None,
        1,
        0)},
                      loc('gClasses/test_DNAseq.py'): {4: (0,
        None,
        1,
        0)},
                      loc('getLineFromList.py'): {18: (0,
        None,
        1,
        0)},
                      loc('listOflists4doug.py'): {23: (0,
        None,
        1,
        0)},
                      loc('list_comparison.py'): {40: (0,
        None,
        1,
        0)},
                      loc('loadList2DictPlusDougsDefs.py'): {35: (0,
        None,
        1,
        0)},
                      loc('microArrayStuff/checkProbe2TxsBlast_V2.py'): {66: (0,
        None,
        1,
        0)},
                      loc('microArrayStuff/probeSets2geneVectors.py'): {45: (0,
        None,
        1,
        0),
        47: (0,
             None,
             1,
             0)},
                      loc('orthologPrep/testingFastaClass.py'): {9: (0,
        None,
        1,
        0)},
                      loc('testGroupByField.py'): {12: (0,
        None,
        1,
        0)},
                      loc('test_SeqMap.py'): {30: (0,
        None,
        1,
        0),
        33: (0,
             None,
             1,
             0)},
                      loc('testing.py'): {5: (0,
        None,
        1,
        0)},
                      loc('timeItScripts/cmpHprGeo_2_psycoHprGeo.py'): {15: (0,
        None,
        1,
        0),
        28: (0,
             None,
             1,
             0)},
                      loc('timeItScripts/cmpSciPyHprGeo_2_statsDefHprGeo.py'): {14: (0,
        None,
        1,
        0)},
                      loc('usableBoundaryRegions/addStpCdnForTuSeqs.py'): {8: (0,
        None,
        1,
        0)},
                      loc('unknown:<untitled> #1'): {25: (0,
        None,
        1,
        0)},
                      loc('unknown:<untitled> #3'): {3: (0,
        None,
        1,
        0)},
                      loc('unknown:<untitled> #2'): {37: (0,
        None,
        1,
        0)},
                      loc('unknown:<untitled> #4'): {32: (0,
        None,
        1,
        0)},
                      loc('unknown:<untitled> #5'): {32: (0,
        None,
        1,
        0)}}
debug.err-values = {None: {},
                    loc('../PlottingScripts/barGraphs/plotRelatedBarStacks.py'): {},
                    loc('!simpleScripts/getKmersInAllSeqs.py'): {},
                    loc('!simpleScripts/getSeqFrom_sol_sequence_txt.py'): {},
                    loc('!simpleScripts/higherOrderGenomeOne2OneOrthologies.py'): {},
                    loc('!simpleScripts/interrogatePickles.py'): {},
                    loc('!simpleScripts/parseMegyDBdump.py'): {},
                    loc('!simpleScripts/scanSeqs4Motifs.py'): {},
                    loc('!simpleScripts/selectFastas_tamo.py'): {},
                    loc('!simpleScripts/tabulate_miRNAseeds.py'): {},
                    loc('!simpleScripts/testScripts/testBioBlastNCBIXML.py'): {},
                    loc('!simpleScripts/whichSeqsHaveEachKmer.py'): {},
                    loc('0_prototyping/GEMSlikePWM.py'): {},
                    loc('0_prototyping/benjHochFDR.py'): {},
                    loc('0_prototyping/dev_goClassEnrich.py'): {},
                    loc('0_prototyping/groupKeysByIntersect.py'): {},
                    loc('0_prototyping/test_setInSetOfSets.py'): {},
                    loc('0_prototyping/testingSciPyHypergeo.py'): {},
                    loc('CRMsTakeTwo/hypergeoPvals4motifPairs.py'): {},
                    loc('DealingWithTabedFiles/calcCoordsForAaCorePromoter.py'): {},
                    loc('EmptyScript.py'): {},
                    loc('LearningTAMO/clusteringMotifs.py'): {},
                    loc('LearningTAMO/metaAceMultiCluster.py'): {},
                    loc('LearningTAMO/randomizing.py'): {},
                    loc('LearningTAMO/runningAlignAce.py'): {},
                    loc('LearningTAMO/runningMotifMetrics.py'): {},
                    loc('LearningTAMO/tamoMotifs2mopatFormat.py'): {},
                    loc('MDAP_proj/GEMSlikePWM.py'): {},
                    loc('MDAP_proj/MDAP.py'): {},
                    loc('MDAP_proj/analyzeFromOneTAMOpickle.py'): {},
                    loc('MDAP_proj/analyzeFromTAMOpickles.py'): {},
                    loc('MDAP_proj/getRandPromoters.py'): {},
                    loc('MDAP_proj/hyperGeoWithMotifsFromOutfile.py'): {},
                    loc('MDAP_proj/testAlignAce.py'): {},
                    loc('MDAP_proj/testBasic.py'): {},
                    loc('MDAP_proj/testMeme.py'): {},
                    loc('MDAP_proj/test_BasicMulti.py'): {},
                    loc('MDAP_proj/test_alignAndCombine.py'): {},
                    loc('MDAP_proj/test_findBestPairAlignments.py'): {},
                    loc('MDOSX_proj/MDOSX_classes.py'): {},
                    loc('MDOSX_proj/test_buildCoRegdOrthoGroups.py'): {},
                    loc('MDOSX_proj/test_combineOrthoTabs.py'): {},
                    loc('MDOSX_proj/test_combineOrthoTabsJamesDefs.py'): {},
                    loc('MDOSX_proj/test_orthoSets.py'): {},
                    loc('MDOSX_proj/test_searchOrthoGroups.py'): {},
                    loc('MDOSX_proj/test_spawnOrthoGroups.py'): {},
                    loc('ModuleDiscovery/buildModulesFromMap.py'): {'stack[-'\
        '1].globals': (-3,
                       None,
                       None,
                       'error',
                       None,
                       1,
                       None,
                       1,
                       '<network timeout during evaluate>',
                       None,
                       None,
                       0),
        'stack[-1].globals.motifMap': (-4,
                                       1,
                                       None,
                                       '0x5beb70',
                                       '__builtin__',
                                       8,
                                       'list',
                                       1,
                                       None,
                                       None,
                                       (),
                                       0),
        'stack[-1].locals': (-3,
                             None,
                             None,
                             'error',
                             None,
                             1,
                             None,
                             1,
                             '<network timeout during evaluate>',
                             None,
                             None,
                             0),
        'stack[-1].locals.motifMap': (-4,
                                      1,
                                      None,
                                      '0x5beb70',
                                      '__builtin__',
                                      8,
                                      'list',
                                      1,
                                      None,
                                      None,
                                      (),
                                      0)},
                    loc('ModuleDiscovery/combosByTableLookUp.py'): {'stack[-'\
        '1].globals.countingDict': (-4,
                                    1,
                                    None,
                                    '0x585e40',
                                    '__builtin__',
                                    8,
                                    'dict',
                                    1,
                                    None,
                                    None,
                                    (),
                                    0),
        'stack[-1].globals.matrixOfAGAPsvMotifs': (-4,
        1,
        None,
        '0x585c00',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].globals.motifCombos': (-4,
        1,
        None,
        '0x15296c0',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.countingDict': (-4,
        1,
        None,
        '0x585e40',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.matrixOfAGAPsvMotifs': (-4,
        1,
        None,
        '0x585c00',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.motifCombos': (-4,
        1,
        None,
        '0x15296c0',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[0].locals.countingDict': (-4,
        9,
        None,
        '0x585e40',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[0].locals.matrixOfAGAPsvMotifs': (-4,
        9,
        None,
        '0x585c90',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0)},
                    loc('ModuleDiscovery/countMotifsByAgapFromMap.py'): {},
                    loc('ModuleDiscovery/dev_motifPairs_buildModulesFromMap.py'): {''\
        'stack[-1].globals': (-3,
                              None,
                              None,
                              'error',
                              None,
                              1,
                              None,
                              1,
                              '<network timeout during evaluate>',
                              None,
                              None,
                              0),
        'stack[-1].locals': (-3,
                             None,
                             None,
                             'error',
                             None,
                             1,
                             None,
                             1,
                             '<network timeout during evaluate>',
                             None,
                             None,
                             0),
        'thread[8389024].stack[current=-1].globals': (-3,
        None,
        None,
        'error',
        None,
        1,
        None,
        1,
        '<network timeout during evaluate>',
        None,
        None,
        0)},
                    loc('ModuleDiscovery/moduleByTableLookUp.py'): {'stack[-'\
        '1].globals.matrixOfAGAPsvMotifs': (-4,
        1,
        None,
        '0x585db0',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.matrixOfAGAPsvMotifs': (-4,
        1,
        None,
        '0x585db0',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0)},
                    loc('ModuleDiscovery/moduleClusterHyperGeo.py'): {'stack'\
        '[-1].globals': (-3,
                         None,
                         None,
                         'error',
                         None,
                         1,
                         None,
                         1,
                         '<network timeout during evaluate>',
                         None,
                         None,
                         0),
        'stack[-1].locals': (-3,
                             None,
                             None,
                             'error',
                             None,
                             1,
                             None,
                             1,
                             '<network timeout during evaluate>',
                             None,
                             None,
                             0),
        'thread[3146192].stack[current=-1].globals': (-3,
        None,
        None,
        'error',
        None,
        1,
        None,
        1,
        '<network timeout during evaluate>',
        None,
        None,
        0)},
                    loc('ModuleDiscovery/motifMap.py'): {'stack[-1].globals.'\
        'dictOfFastas': (-4,
                         1,
                         None,
                         '0x2316ae0',
                         '__builtin__',
                         8,
                         'dict',
                         1,
                         None,
                         None,
                         (),
                         0),
        'stack[-1].globals.resultList': (-4,
        1,
        None,
        '0x1117b70',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.dictOfFastas': (-4,
        1,
        None,
        '0x2316ae0',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.resultList': (-4,
        1,
        None,
        '0x1117b70',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0)},
                    loc('ModuleDiscovery/subtract_MOPAT_headers.py'): {},
                    loc('Tu_miRNA/barBoxFromPickles.py'): {},
                    loc('Tu_miRNA/boxesOfZsForSeedType.py'): {},
                    loc('Tu_miRNA/fastaKmersIn2species.py'): {},
                    loc('Tu_miRNA/miR_geneTargets.py'): {},
                    loc('Tu_miRNA/test_pickledSeeds.py'): {},
                    loc('Tu_miRNA/test_seedObj.py'): {},
                    loc('checkProbe2ProbeBlast.py'): {},
                    loc('clusterDefs2multiFastaFiles.py'): {},
                    loc('clusterHyperGeo/clusterHyperGeo.py'): {'stack[-1].g'\
        'lobals.boundarySeqs': (-4,
                                1,
                                None,
                                '0x1ea0d20',
                                '__builtin__',
                                8,
                                'dict',
                                1,
                                None,
                                None,
                                (),
                                0),
        'stack[-1].locals.boundarySeqs': (-4,
        1,
        None,
        '0x1ea0d20',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[0].globals.boundarySeqs': (-4,
        2,
        None,
        '0x1b1adb0',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[0].locals.seqDict': (-4,
                                    1,
                                    None,
                                    '0x1b1adb0',
                                    '__builtin__',
                                    8,
                                    'dict',
                                    1,
                                    None,
                                    None,
                                    (),
                                    0)},
                    loc('codingBounds.py'): {'stack[-1].globals.bioMartList': (-4,
        1,
        None,
        '0x43d1c0',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.bioMartList': (-4,
        1,
        None,
        '0x43d1c0',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[0].locals.listOfExonLists': (-4,
        1,
        None,
        '0x1fe9c60',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0)},
                    loc('collapseMotifsOnRevComp.py'): {},
                    loc('corePromoterStuff/count2MotifsConstrainedDist.py'): {},
                    loc('corePromoterStuff/mapAndCountMotif.py'): {},
                    loc('corePromoterStuff/mapAndCount_InrDpe.py'): {},
                    loc('corePromoterStuff/mapCount2ndMotif.py'): {},
                    loc('corePromoterStuff/plotHitsOnAlignedSeqs.py'): {},
                    loc('defs/selectFastas.py'): {'stack[-1].globals.origina'\
        'lFastaDict': (-4,
                       1,
                       None,
                       '0x1101390',
                       '__builtin__',
                       8,
                       'dict',
                       1,
                       None,
                       None,
                       (),
                       0),
        'stack[-1].locals.originalFastaDict': (-4,
        1,
        None,
        '0x1101390',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0)},
                    loc('fjoinConfilctResolver.py'): {},
                    loc('fjoinConfilctResolverTesting.py'): {'stack[-1].glob'\
        'als.conflictList': (-4,
                             1,
                             None,
                             '0x43bf08',
                             '__builtin__',
                             8,
                             'list',
                             1,
                             None,
                             None,
                             (),
                             0),
        'stack[-1].locals.conflictList': (-4,
        1,
        None,
        '0x43bf08',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[0].locals.listOfExonLists': (-4,
        5,
        None,
        '0x10401e8',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0)},
                    loc('listOflists4doug.py'): {},
                    loc('list_comparison.py'): {},
                    loc('loadList2DictPlusDougsDefs.py'): {},
                    loc('microArrayStuff/checkProbe2ProbeBlast_V2.py'): {},
                    loc('microArrayStuff/checkProbe2TxsBlast_V2.py'): {},
                    loc('microArrayStuff/testGeneVectorsClass.py'): {},
                    loc('nonRedunList.py'): {},
                    loc('orthologPrep/combineOrthologs.py'): {'stack[-1].glo'\
        'bals.genomeOneFastasDict': (-4,
                                     1,
                                     None,
                                     '0x1102420',
                                     '__builtin__',
                                     8,
                                     'dict',
                                     1,
                                     None,
                                     None,
                                     (),
                                     0),
        'stack[-1].globals.genomeOneGeneIDs': (-4,
        1,
        None,
        '0x1155738',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].globals.genomeTwoFastasDict': (-4,
        1,
        None,
        '0x2b005d0',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].globals.genomeTwoGeneIDs': (-4,
        1,
        None,
        '0x1155760',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].globals.orthologList': (-4,
        1,
        None,
        '0x10835f8',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.genomeOneFastasDict': (-4,
        1,
        None,
        '0x1102420',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.genomeOneGeneIDs': (-4,
        1,
        None,
        '0x1155738',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.genomeTwoFastasDict': (-4,
        1,
        None,
        '0x2b005d0',
        '__builtin__',
        8,
        'dict',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.genomeTwoGeneIDs': (-4,
        1,
        None,
        '0x1155760',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.orthologList': (-4,
        1,
        None,
        '0x10835f8',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0)},
                    loc('orthologPrep/testingFastaClass.py'): {},
                    loc('reorderFastaHeader.py'): {'stack[-1].globals.fastaD'\
        'ict': (-4,
                1,
                None,
                '0x2245a50',
                '__builtin__',
                8,
                'dict',
                1,
                None,
                None,
                (),
                0),
        'stack[-1].locals.fastaDict': (-4,
                                       1,
                                       None,
                                       '0x2245a50',
                                       '__builtin__',
                                       8,
                                       'dict',
                                       1,
                                       None,
                                       None,
                                       (),
                                       0),
        'stack[0].locals.listOfSeqs': (-4,
                                       1,
                                       None,
                                       '0x10fed50',
                                       '__builtin__',
                                       8,
                                       'list',
                                       1,
                                       None,
                                       None,
                                       (),
                                       0)},
                    loc('test_SeqMap.py'): {},
                    loc('testing.py'): {'stack[-1].globals': (-3,
        None,
        None,
        'error',
        None,
        1,
        None,
        1,
        '<network timeout during evaluate>',
        None,
        None,
        0),
        'stack[-1].locals': (-3,
                             None,
                             None,
                             'error',
                             None,
                             1,
                             None,
                             1,
                             '<network timeout during evaluate>',
                             None,
                             None,
                             0)},
                    loc('testingReOrderDelimitedList.py'): {},
                    loc('usableBoudaryRegions/analyzeNs.py'): {},
                    loc('usableBoudaryRegions/fjoinCtrlr.py'): {},
                    loc('usableBoudaryRegions/recombineCoords.py'): {'stack['\
        '-1].globals.codingBoundsList': (-4,
        1,
        None,
        '0x43d5d0',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0),
        'stack[-1].locals.codingBoundsList': (-4,
        1,
        None,
        '0x43d5d0',
        '__builtin__',
        8,
        'list',
        1,
        None,
        None,
        (),
        0)},
                    loc('usableBoundaryRegions/analyzeNs.py'): {},
                    loc('usableBoundaryRegions/codingBounds.py'): {}}
debug.exceptions-ignored = {loc('ModuleDiscovery/moduleClusterHyperGeo.py'): {102: 1}}
debug.run-args = {loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/Sitemap.py'): ''\
        '-f /Users/biggus/Documents/James/Collaborations/Campbell/data/CCupA'\
        't4Days.masked.fas -i /Users/biggus/Documents/James/Collaborations/C'\
        'ampbell/data/Results_HyperGeoScreen/Results_gGEMS/CCupAt4Days.6-8me'\
        'rs.gGEMS.top6.motifs.stdThresh.tmo ',
                  loc('!simpleScripts/gcContentOfFastas.py'): '/Users/biggus'\
        '/Documents/James/Data/ClusterDefs/TC-Fastas/TC-8.fas',
                  loc('!simpleScripts/scanSeqs4Motifs.py'): '> /Users/biggus'\
        '/Documents/James/Writings_Talks/Grants/09_Feb/POI_Ag_hits.txt',
                  loc('BloodFly/BF_BasicSearch.py'): ' > /Users/biggus/Docum'\
        'ents/James/Data/RedFly/shuffled_Upstream_mosquito-conserved_8-mers.'\
        'redFlyCount.txt',
                  loc('FilterLinesOnRegEx.py'): '/Users/biggus/Desktop/testF'\
        'ilter.txt /Users/biggus/Desktop/testFilterWords.txt',
                  loc('LearningTAMO/metaAceMultiCluster.py'): '/Users/biggus'\
        '/Documents/James/Data/ReClustering/kmedsPear33Clus50x_2/Clus2_247ge'\
        'nes.6EucClus/ 3 Clus2_247genes.6EucClus.metaAce',
                  loc('LearningTAMO/runMetaAce.py'): '/Users/biggus/Document'\
        's/James/Collaborations/Campbell/data/ 5 test CCupAt4Days.gte2x.mask'\
        'ed*fas',
                  loc('MDAP_proj/MDAP.py'): ' -h',
                  loc('MDAP_proj/getRandPromoters.py'): '/Users/biggus/Docum'\
        'ents/James/Data/ReClustering/PrelimData_Grant_Feb09/Clus2_247genes.'\
        'fas 0.8',
                  loc('Solexa/filterCountFastaOnCountsAndSort.py'): '/Users/'\
        'biggus/Downloads/s_7_sequence.seqCount.250entries.fas /Users/biggus'\
        '/Downloads/s_7_sequence.seqCount.250entries.filter_gte3000.fas x>=5',
                  loc('chooseRandomFromList.py'): '/Users/biggus/Documents/M'\
        'BGB/Rotations/James/Data/Shuffler/dougsAffyList.txt 100',
                  loc('defs/seqStats.py'): '/Users/biggus/Documents/James/Wr'\
        'itings_Talks/Grants/09_Feb/PrelimData_Grant_Feb09/Clus2_247genes.fa'\
        's ',
                  loc('microArrayStuff/probeSets2geneVectors.py'): '/Users/b'\
        'iggus/Documents/James/Data/DoubleBloodMeal/nbf\\ 24\\ 48\\ 72\\ mbf'\
        '.avgdNormd.bmsCluster.txt /Users/biggus/Documents/James/Data/MicroA'\
        'rray/OMsAgExperiments/probSet2geneList.txt pearson /Users/biggus/Do'\
        'cuments/James/Data/MicroArray/OMsAgExperiments/probSet2geneList.out'\
        'put',
                  loc('orthologPrep/combineOrthologs_fromSeedTabs.py'): '/Us'\
        'ers/biggus/Documents/James/Data/Tu_miRNA/SeedCountOutPut/counts/tes'\
        'tSeedsOn_Ag_500afterCoding.txt /Users/biggus/Documents/James/Data/T'\
        'u_miRNA/SeedCountOutPut/counts/testSeedsOn_Cq_500afterCoding.newCoo'\
        'rds.txt /Users/biggus/Documents/James/Data/OrthologDefs/Culex_Agam_'\
        '1-to-1.nr.txt /Users/biggus/Documents/James/Data/Tu_miRNA/SeedCount'\
        'OutPut/counts/AgCq_seedTabs.combined.txt'}
debug.var-col-widths = [0.33931484502446985,
                        0.66068515497553015]
edit.dont-ask-to-fix-inconsistent-indents = {loc('LearningTAMO/clusteringMotifs.py'): True,
        loc('MDAP_proj/MDAP.py'): True,
        loc('defs/JamesDefs.py'): 1,
        loc('defs/statsDefs.py'): True,
        loc('fjoin.py'): 1,
        loc('fjoin.py.bak.py'): 1,
        loc('gClasses/MDAP/MDAPbase.py'): True}
edit.show-tab-force-warning = 0
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'cUpChpreeZwnJO6ubsGQGctprq'\
        'L05ByC',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [2],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.22229965156794429,
                 'override_title': None,
                 'pagelist': [('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': 0,
        'tree-states': {'deep': {'column-widths': [1.0],
                                 'expanded-nodes': [(1,),
        (20,)],
                                 'selected-nodes': [(1,
        4)],
                                 'top-node': (0,)},
                        'flat': {'column-widths': [1.0],
                                 'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': (0,)},
                        'mime': {'column-widths': [1.0],
                                 'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [0,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.42447129909365555,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {None: []},
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 0,
                       'selection_start': 0}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {None: ["data.['miR_matches'].keys()[:3]\n",
        'data.[miR_matches].keys()[:3]\n',
        "data['miR_matches'].keys()[:3]\n",
        "data['miR_matches']['aga-miR-309'].calcCtrlMeanStDv()\n",
        'quit()\n',
        'exit()\n',
        'del data\n',
        'c = 0\n',
        '\tprint c+=1\n',
        'for i in range(4):\n',
        "\tprint '%s' % (c+=1)\n",
        'import ensembl\n',
        'import pygr\n',
        'wb = pygr.worldbase()\n',
        'wb = pygr.worldbase.__call__.__doc__\n',
        'wb\n',
        'wb = pygr.worldbase\n',
        'wb.dir()\n',
        "wb.dir('')\n",
        's = set([11,2,3,4,2])\n',
        't=s\n',
        't.add(9)\n',
        'del t\n',
        't\n',
        's = []\n',
        's = [1,5,3,3,7,1,-34]\n',
        's = set(s)\n',
        's\n',
        "print '%s' % (sorted(list(s)))\n",
        'real = [100,100,100]\n',
        'ctrl = [5,10,10]\n',
        'FDRs = [5.0/100,10.0/100,10.0/100]\n',
        'FDRs\n',
        '(0.05 +0.1 +0.1)/3\n',
        '25.0/300\n',
        'l = [0]*4\n',
        'l[1] = 8\n',
        "print '%.6e' % (0)\n",
        "print '%.6e' % (0.0000000000000012345678)\n",
        '1.1\n',
        "print '%.6e' % (1.1)\n",
        "print eval('%.6e' % (1.1))\n",
        "print float('%.6e' % (1.1))\n",
        "eval('%.6e' % (1.1))\n",
        'print 1.1\n',
        "'%.6e' % (1.1) > '%.6e' % (1.0)\n",
        "'%.6e' % (1.1) > '%.6e' % (1.1)\n",
        "'%.6e' % (1.1) > '%.6e' % (1.2)\n",
        "'%.6e' % (1.1) > '%.6e' % (11.1)\n",
        "'%.6e' % (11.1) > '%.6e' % (1.1)\n",
        'from gusPyCode.defs.JamesDefs import DotDict\n',
        'd = {1:2,3:4}\n',
        'd1\n',
        'd.1\n',
        'dict.__setitem__\n',
        'dict.__setitem__()\n',
        'dict.__setitem__.__doc__\n',
        "d = {'one':2,'b':4}\n",
        'D = DotDict(d)\n',
        'd.one\n',
        'D.one\n',
        'd\n',
        '__name__\n',
        "l = [('a','b'),('c','a'),('a','d')]\n",
        "[y for y in [x for x in l] if y.startswith('a')]\n",
        '[x for x in l]\n',
        'l\n',
        '[x[i for i in range(len(x))] for x in l ]\n',
        '[x for x in l ]\n',
        "[[y for y in x if x.startswith('a')] for x in l ]\n",
        '[[y for y in x] for x in l ]\n',
        "s = 'may bonny'\n",
        "s.startswith('my')\n",
        "s.startswith('may')\n",
        's=set()\n',
        's.__repr__\n',
        '1.__repr__\n',
        'tuple("(1,2,3)")\n',
        'from decimal import Decimal as Dec\n',
        'a = Dec(345)\n',
        'a\n',
        'a+45\n',
        'float(a)\n',
        'str(a)\n',
        "'%.4g'%(a)\n",
        'a = Dec(0.0000000000000000004)\n',
        '3<5<7\n',
        '3<5<4\n',
        '8<5<7\n',
        '8<5<=5\n',
        '3<5<=5\n',
        '3<5<5\n',
        '4<=4<=6\n',
        '4<=6<=6\n',
        '4<=5<=6\n',
        '4<=3<=6\n',
        '4<=9<=6\n',
        'from TAMO.MotifTools import Motif\n',
        "m = Motif('GGATAGT')\n",
        'm.new_bg()\n']},
                       'sel-line': 3,
                       'sel-line-start': 167,
                       'selection_end': 171,
                       'selection_start': 171}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'std',
                                       'fReverse': False,
                                       'fSearchText': u'Aa_2000bpUp_hardMasked_shuf3',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'filter fasta',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': True,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('MDAP_proj/analyzeFromTAMOpickles.py'),
        {'attrib-starts': [],
         'first-line': 28,
         'folded-linenos': [],
         'sel-line': 31,
         'sel-line-start': 1157,
         'selection_end': 1169,
         'selection_start': 1169},
        1257219250.748457),
        (loc('MDAP_proj/analyzeFromOneTAMOpickle.py'),
         {'attrib-starts': [],
          'first-line': 16,
          'folded-linenos': [],
          'sel-line': 20,
          'sel-line-start': 865,
          'selection_end': 894,
          'selection_start': 865},
         1257221336.01385),
        (loc('MDAP_proj/analyzeFromOneTAMOpickle.py'),
         {'attrib-starts': [],
          'first-line': 16,
          'folded-linenos': [],
          'sel-line': 24,
          'sel-line-start': 1005,
          'selection_end': 1005,
          'selection_start': 1005},
         1257221375.59954),
        (loc('MDAP_proj/analyzeFromOneTAMOpickle.py'),
         {'attrib-starts': [],
          'first-line': 16,
          'folded-linenos': [],
          'sel-line': 24,
          'sel-line-start': 1005,
          'selection_end': 1032,
          'selection_start': 1032},
         1257221433.6002569),
        (loc('MDAP_proj/analyzeFromOneTAMOpickle.py'),
         {'attrib-starts': [],
          'first-line': 16,
          'folded-linenos': [],
          'sel-line': 24,
          'sel-line-start': 1005,
          'selection_end': 1005,
          'selection_start': 1005},
         1257221467.0719261),
        (loc('MDAP_proj/analyzeFromOneTAMOpickle.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 24,
          'sel-line-start': 1005,
          'selection_end': 1005,
          'selection_start': 1005},
         1257221484.133517),
        (loc('MDAP_proj/test_AlignAce.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1257288526.0839629),
        (loc('MDAP_proj/test_Meme.py'),
         {'attrib-starts': [],
          'first-line': 12,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1257288567.9131241),
        (loc('MDAP_proj/test_AlignAce.py'),
         {'attrib-starts': [],
          'first-line': 15,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1257288585.3447001),
        (loc('MDAP_proj/test_BasicMulti.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1257288624.427819),
        (loc('MDAP_proj/test_AlignAce.py'),
         {'attrib-starts': [],
          'first-line': 16,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1257288649.660784),
        (loc('LearningTAMO/runMetaAce.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1257302195.8305571),
        (loc('LearningTAMO/runMetaAce.py'),
         {'attrib-starts': [],
          'first-line': 8,
          'folded-linenos': [],
          'sel-line': 13,
          'sel-line-start': 326,
          'selection_end': 349,
          'selection_start': 349},
         1257302433.2753749),
        (loc('!simpleScripts/geneList2Fasta.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 2,
          'sel-line-start': 81,
          'selection_end': 116,
          'selection_start': 116},
         1257303081.8376141),
        (loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/mosqData/promoterSeqPaths.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1257303138.802073),
        (loc('!simpleScripts/geneList2Fasta.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 10,
          'sel-line-start': 353,
          'selection_end': 421,
          'selection_start': 362},
         1257303180.760865),
        (loc('LearningTAMO/runMetaAce.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 8,
          'sel-line-start': 149,
          'selection_end': 161,
          'selection_start': 161},
         1257303637.872699),
        (loc('LearningTAMO/runMetaAce.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 11,
          'sel-line-start': 286,
          'selection_end': 286,
          'selection_start': 286},
         1257304516.940762),
        (loc('LearningTAMO/runMetaAce.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 11,
          'sel-line-start': 286,
          'selection_end': 286,
          'selection_start': 286},
         1257304531.7003579),
        [loc('LearningTAMO/runMetaAce.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 9,
          'sel-line-start': 247,
          'selection_end': 247,
          'selection_start': 247},
         1257304545.4854479]],
        19),
        'current-loc': loc('LearningTAMO/runMetaAce.py'),
        'editor-states': {loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/mosqData/promoterSeqPaths.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                          loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/nucFreqRepo.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 11,
        'sel-line-start': 483,
        'selection_end': 522,
        'selection_start': 522},
                          loc('!simpleScripts/geneList2Fasta.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 353,
        'selection_end': 421,
        'selection_start': 362},
                          loc('LearningTAMO/runMetaAce.py'): {'attrib-starts': [],
        'first-line': 4,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 247,
        'selection_end': 247,
        'selection_start': 247},
                          loc('MDAP_proj/analyzeFromOneTAMOpickle.py'): {'at'\
        'trib-starts': [],
        'first-line': 4,
        'folded-linenos': [],
        'sel-line': 24,
        'sel-line-start': 1005,
        'selection_end': 1005,
        'selection_start': 1005},
                          loc('MDAP_proj/analyzeFromTAMOpickles.py'): {'attr'\
        'ib-starts': [],
        'first-line': 28,
        'folded-linenos': [],
        'sel-line': 31,
        'sel-line-start': 1157,
        'selection_end': 1169,
        'selection_start': 1169},
                          loc('MDAP_proj/test_AlignAce.py'): {'attrib-starts': [],
        'first-line': 16,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                          loc('MDAP_proj/test_Meme.py'): {'attrib-starts': [],
        'first-line': 12,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0}},
        'has-focus': True},
                               'open_files': [u'../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/nucFreqRepo.py',
        u'MDAP_proj/analyzeFromOneTAMOpickle.py',
        u'MDAP_proj/analyzeFromTAMOpickles.py',
        u'MDAP_proj/test_Meme.py',
        u'MDAP_proj/test_AlignAce.py',
        u'!simpleScripts/geneList2Fasta.py',
        u'LearningTAMO/runMetaAce.py']},
        'split_percents': {0: 0.57742782152230976},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {},
                 'splits': 1,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         1440,
                         777)}]}
guimgr.recent-documents = [loc('LearningTAMO/runMetaAce.py'),
                           loc('!simpleScripts/geneList2Fasta.py'),
                           loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/mosqData/promoterSeqPaths.py'),
                           loc('MDAP_proj/test_AlignAce.py')]
guimgr.visual-state = {loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MotifMetrics.py'): {''\
        'attrib-starts': [('ProbeSet',
                           496),
                          ('ProbeSet.best_p_value',
                           900)],
        'first-line': 905,
        'folded-linenos': [],
        'sel-line': 915,
        'sel-line-start': 35399,
        'selection_end': 35399,
        'selection_start': 35399},
                       loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MotifTools.py'): {''\
        'attrib-starts': [('sum',
                           1748)],
        'first-line': 1750,
        'folded-linenos': [],
        'sel-line': 1760,
        'sel-line-start': 61711,
        'selection_end': 61711,
        'selection_start': 61711},
                       loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/MDAP_proj/MDAP_defs.py'): {''\
        'attrib-starts': [('alignSimilarMotifs',
                           155)],
        'first-line': 147,
        'folded-linenos': [],
        'sel-line': 169,
        'sel-line-start': 6417,
        'selection_end': 6452,
        'selection_start': 6452},
                       loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/JamesDefs.py'): {''\
        'attrib-starts': [('revComp',
                           313)],
        'first-line': 308,
        'folded-linenos': [],
        'sel-line': 313,
        'sel-line-start': 10619,
        'selection_end': 10630,
        'selection_start': 10623},
                       loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/defs_moduleByTableLookUp.py'): {''\
        'attrib-starts': [('makeFwdAndRevCompRegExObj',
                           116)],
        'first-line': 111,
        'folded-linenos': [],
        'sel-line': 116,
        'sel-line-start': 3660,
        'selection_end': 3689,
        'selection_start': 3664},
                       loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/doug_hypergeometric.py'): {''\
        'attrib-starts': [('hypergeo',
                           17)],
        'first-line': 15,
        'folded-linenos': [],
        'sel-line': 18,
        'sel-line-start': 420,
        'selection_end': 421,
        'selection_start': 421},
                       loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/defs/statsDefs.py'): {''\
        'attrib-starts': [('hypergeoP',
                           90)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 90,
        'sel-line-start': 1990,
        'selection_end': 2003,
        'selection_start': 1994},
                       loc('../../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gusPyCode/gClasses/supportVars.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../../Applications/WingIDE.app/Contents/MacOS/resources/builtin-pi-files/2.5/__builtin__.pi'): {''\
        'attrib-starts': [('sum',
                           1609)],
        'first-line': 1601,
        'folded-linenos': [],
        'sel-line': 1609,
        'sel-line-start': 50346,
        'selection_end': 50353,
        'selection_start': 50350},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/random.py'): {''\
        'attrib-starts': [('Random',
                           68),
                          ('Random.choice',
                           245)],
        'first-line': 237,
        'folded-linenos': [],
        'sel-line': 245,
        'sel-line-start': 8991,
        'selection_end': 9005,
        'selection_start': 8999},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/matplotlib/axes.py'): {''\
        'attrib-starts': [('Axes',
                           414),
                          ('Axes.boxplot',
                           4686)],
        'first-line': 4749,
        'folded-linenos': [],
        'sel-line': 4761,
        'sel-line-start': 165090,
        'selection_end': 165090,
        'selection_start': 165090},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/matplotlib/pyplot.py'): {''\
        'attrib-starts': [('figure',
                           174)],
        'first-line': 173,
        'folded-linenos': [],
        'sel-line': 174,
        'sel-line-start': 5775,
        'selection_end': 5785,
        'selection_start': 5779},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/numpy/core/fromnumeric.py'): {''\
        'attrib-starts': [('std',
                           2018)],
        'first-line': 2030,
        'folded-linenos': [],
        'sel-line': 2018,
        'sel-line-start': 53993,
        'selection_end': 54000,
        'selection_start': 53997},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/pygr-0.8.0.beta1-py2.5-macosx-10.5-i386.egg/pygr/__init__.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 153,
        'selection_end': 166,
        'selection_start': 157},
                       loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/pygr-0.8.0.beta1-py2.5-macosx-10.5-i386.egg/pygr/metabase.py'): {''\
        'attrib-starts': [('MetabaseList',
                           842)],
        'first-line': 841,
        'folded-linenos': [],
        'sel-line': 848,
        'sel-line-start': 39400,
        'selection_end': 39470,
        'selection_start': 39428},
                       loc('../../../../../.wingpersonal3/pi-cache/2.5/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/gmpy.pi'): {''\
        'attrib-starts': [('comb',
                           76)],
        'first-line': 70,
        'folded-linenos': [],
        'sel-line': 76,
        'sel-line-start': 2219,
        'selection_end': 2227,
        'selection_start': 2223},
                       loc('../../../../.wingpersonal3/pi-cache/2.5/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-dynload/cPickle.pi'): {''\
        'attrib-starts': [('dump',
                           59)],
        'first-line': 50,
        'folded-linenos': [],
        'sel-line': 59,
        'sel-line-start': 1574,
        'selection_end': 1582,
        'selection_start': 1578},
                       loc('!simpleScripts/geneList2Fasta.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 225,
        'selection_end': 284,
        'selection_start': 256},
                       loc('!simpleScripts/getKmersInAllSeqs.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 99,
        'selection_end': 133,
        'selection_start': 99},
                       loc('!simpleScripts/getSeqFrom_sol_sequence_txt.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 26,
        'sel-line-start': 595,
        'selection_end': 828,
        'selection_start': 595},
                       loc('!simpleScripts/testOverlapRegEx.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 39,
        'selection_start': 3},
                       loc('!simpleScripts/testScripts/testBioBlastNCBIXML.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 30,
        'selection_end': 64,
        'selection_start': 30},
                       loc('!simpleScripts/whichSeqsHaveEachKmer.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 99,
        'selection_end': 133,
        'selection_start': 99},
                       loc('0_prototyping/addRvCmpNumbers4Doug.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 36,
        'selection_start': 36},
                       loc('0_prototyping/benjHochFDR.py'): {'attrib-starts': [(''\
        'benjHoch',
        0)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 710,
        'selection_start': 0},
                       loc('0_prototyping/dev_goClassEnrich.py'): {'attrib-s'\
        'tarts': [('filtAGAP',
                   39)],
        'first-line': 39,
        'folded-linenos': [],
        'sel-line': 39,
        'sel-line-start': 1491,
        'selection_end': 1732,
        'selection_start': 1491},
                       loc('0_prototyping/test_appendListInLoop_refOrReal.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 127,
        'selection_end': 127,
        'selection_start': 127},
                       loc('0_prototyping/test_setInSetOfSets.py'): {'attrib'\
        '-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 15,
        'sel-line-start': 310,
        'selection_end': 310,
        'selection_start': 310},
                       loc('0_prototyping/timeBinomialFuncs.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 36,
        'selection_end': 72,
        'selection_start': 72},
                       loc('BackUpFiles/codingBounds.bak.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 60,
        'selection_end': 98,
        'selection_start': 60},
                       loc('BloodFly/BF_BasicSearch.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 5,
        'selection_start': 0},
                       loc('CRMsTakeTwo/hypergeoPvals4motifPairs.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 96,
        'selection_end': 133,
        'selection_start': 96},
                       loc('CRMsTakeTwo/makeMotifMaps.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 82,
        'selection_end': 119,
        'selection_start': 82},
                       loc('Collapse3wayOrthoList.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 177,
        'selection_end': 224,
        'selection_start': 224},
                       loc('CountIf3.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 62,
        'selection_end': 88,
        'selection_start': 82},
                       loc('EmptyScript.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 61,
        'selection_start': 0},
                       loc('FilterLinesOnRegEx.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 34,
        'selection_end': 40,
        'selection_start': 34},
                       loc('LearningTAMO/2KBupTSS_goodAffyAGAPsFastasOUT.masked.nr.fas.pickle.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 5,
        'selection_start': 0},
                       loc('LearningTAMO/tamoMotifs2mopatFormat.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 60,
        'selection_end': 94,
        'selection_start': 60},
                       loc('MDAP_proj/GEMSlikePWM.py'): {'attrib-starts': [],
        'first-line': 100,
        'folded-linenos': [],
        'sel-line': 5,
        'sel-line-start': 137,
        'selection_end': 162,
        'selection_start': 162},
                       loc('MDAP_proj/MDAP.py'): {'attrib-starts': [('MDAP',
        12),
        ('MDAP.validate',
         71)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 74,
        'sel-line-start': 2789,
        'selection_end': 2830,
        'selection_start': 2825},
                       loc('MDAP_proj/MDAP_defs.py'): {'attrib-starts': [('g'\
        'etKmersWithOneMisMtch',
        129)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 139,
        'sel-line-start': 5028,
        'selection_end': 5072,
        'selection_start': 5072},
                       loc('MDAP_proj/MD_wrappers.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/MarkovBackground.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/analyzeFromOneTAMOpickle.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 58,
        'selection_end': 83,
        'selection_start': 83},
                       loc('MDAP_proj/analyzeFromTAMOpickles.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 58,
        'selection_end': 83,
        'selection_start': 63},
                       loc('MDAP_proj/changing_AlignSimMotifs.py'): {'attrib'\
        '-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 65,
        'selection_end': 90,
        'selection_start': 90},
                       loc('MDAP_proj/combine_a_few_motifs.py'): {'attrib-st'\
        'arts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/getRandPromoters.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/hyperGeoWithListOfIUPACs.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 25,
        'selection_start': 25},
                       loc('MDAP_proj/hyperGeoWithMotifsFromOutfile.py'): {''\
        'attrib-starts': [],
        'first-line': 3,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 157,
        'selection_end': 186,
        'selection_start': 186},
                       loc('MDAP_proj/mapMotifsFromPickle.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/md2tamo.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 93,
        'selection_end': 93,
        'selection_start': 93},
                       loc('MDAP_proj/test_AlignAce.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test_Basic.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 110,
        'selection_end': 154,
        'selection_start': 154},
                       loc('MDAP_proj/test_BasicCtrl_RandClust.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test_BasicMulti.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test_Meme.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test_alignAndCombine.py'): {'attrib-st'\
        'arts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 25,
        'selection_start': 25},
                       loc('MDAP_proj/test_findBestPairAlignments.py'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 25,
        'selection_start': 25},
                       loc('MDAP_proj/test_runMDAP.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('MDAP_proj/test_shuffleSeqDict.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 235,
        'selection_end': 285,
        'selection_start': 285},
                       loc('MDAP_proj/test_transFac2tamo.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 25,
        'selection_start': 25},
                       loc('MDAP_proj/writeRandClustFiles.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 6,
        'sel-line-start': 138,
        'selection_end': 138,
        'selection_start': 138},
                       loc('MDOSX_proj/MDOSX.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 60,
        'selection_end': 96,
        'selection_start': 96},
                       loc('MDOSX_proj/MDOSX_defs/defs.py'): {'attrib-starts': [(''\
        'combineOrthoTabs',
        146)],
        'first-line': 162,
        'folded-linenos': [],
        'sel-line': 146,
        'sel-line-start': 4963,
        'selection_end': 7546,
        'selection_start': 4963},
                       loc('MDOSX_proj/test_combineOrthoTabs.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 13,
        'selection_start': 13},
                       loc('MDOSX_proj/test_combineOrthoTabsJamesDefs.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 36,
        'selection_start': 0},
                       loc('ModuleDiscovery/biggerComboParamsFromMatrix.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 89,
        'selection_end': 150,
        'selection_start': 89},
                       loc('ModuleDiscovery/buildModulesFromMap.BAK_052908.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 43,
        'selection_end': 79,
        'selection_start': 43},
                       loc('ModuleDiscovery/buildModulesFromMap.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 43,
        'selection_end': 64,
        'selection_start': 64},
                       loc('ModuleDiscovery/buildModulesFromMapSmalLScale.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 43,
        'selection_end': 79,
        'selection_start': 43},
                       loc('ModuleDiscovery/calcHyperGeoFromMatrixResults.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 11,
        'selection_end': 72,
        'selection_start': 11},
                       loc('ModuleDiscovery/combosByTableLookUp.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 39,
        'selection_end': 75,
        'selection_start': 39},
                       loc('ModuleDiscovery/countMotifsByAgapFromMap.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 43,
        'selection_end': 79,
        'selection_start': 43},
                       loc('ModuleDiscovery/dev_motifPairs_buildModulesFromMap.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 43,
        'selection_end': 79,
        'selection_start': 43},
                       loc('ModuleDiscovery/moduleClusterHyperGeo.py'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 71,
        'selection_end': 132,
        'selection_start': 71},
                       loc('ModuleDiscovery/motifPairs/JamesDefs.py'): {'att'\
        'rib-starts': [('fastaFileToBioSeqDict',
                        14)],
        'first-line': 11,
        'folded-linenos': [],
        'sel-line': 16,
        'sel-line-start': 417,
        'selection_end': 426,
        'selection_start': 421},
                       loc('ModuleDiscovery/motifPairs/dev_motifPairs_buildModulesFromMap.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 43,
        'selection_end': 79,
        'selection_start': 43},
                       loc('ModuleDiscovery/sparePartsFromClusterHyperGeo.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 71,
        'selection_end': 117,
        'selection_start': 117},
                       loc('Solexa/extractCountsFromCountFasta.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 13,
        'selection_end': 84,
        'selection_start': 84},
                       loc('Solexa/filterCountFastaOnCounts.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 11,
        'sel-line-start': 246,
        'selection_end': 274,
        'selection_start': 274},
                       loc('Solexa/filterCountFastaOnCountsAndSort.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 16,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 451,
        'selection_end': 459,
        'selection_start': 459},
                       loc('Solexa/simpleHistogram.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 117,
        'selection_end': 177,
        'selection_start': 177},
                       loc('Solexa/sortCountFasta.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 141,
        'selection_end': 155,
        'selection_start': 155},
                       loc('Tu_miRNA/barBoxFromPickles.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 51,
        'selection_end': 93,
        'selection_start': 71},
                       loc('Tu_miRNA/boxesOfZsForSeedType.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 36,
        'selection_end': 56,
        'selection_start': 56},
                       loc('Tu_miRNA/countAndSaveSeedMatchObjs.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 90,
        'selection_end': 98,
        'selection_start': 98},
                       loc('Tu_miRNA/countAndSaveSeedMatchObjspy'): {'attrib'\
        '-starts': [],
        'first-line': 36,
        'folded-linenos': [],
        'sel-line': 51,
        'sel-line-start': 1884,
        'selection_end': 1887,
        'selection_start': 1887},
                       loc('Tu_miRNA/countHItsIn_N_orthologs.py'): {'attrib-'\
        'starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/counts4AllThree.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 36,
        'selection_start': 0},
                       loc('Tu_miRNA/histOfFDRsSeed.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/histOfFDRsTot.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/histOfPassedOrthoTypes.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/matchMDOSseeds2Known.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 50,
        'selection_end': 86,
        'selection_start': 50},
                       loc('Tu_miRNA/miR_GO.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/miR_geneTargets.py'): {'attrib-starts': [],
        'first-line': 92,
        'folded-linenos': [],
        'sel-line': 29,
        'sel-line-start': 1405,
        'selection_end': 1482,
        'selection_start': 1405},
                       loc('Tu_miRNA/miR_geneTargets_exp1.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 97,
        'selection_end': 139,
        'selection_start': 117},
                       loc('Tu_miRNA/multiHistOfStats.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/openPickledSeeds.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 15,
        'selection_end': 57,
        'selection_start': 35},
                       loc('Tu_miRNA/plotCtrlHist.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 41,
        'selection_end': 83,
        'selection_start': 61},
                       loc('Tu_miRNA/purgePickles.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 15,
        'selection_end': 57,
        'selection_start': 35},
                       loc('Tu_miRNA/seedHitsFromMDOS.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 36,
        'selection_end': 72,
        'selection_start': 36},
                       loc('Tu_miRNA/tabulate_miRNAseeds.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 27,
        'selection_end': 64,
        'selection_start': 28},
                       loc('Tu_miRNA/targetingAllInOne.py'): {'attrib-starts': [],
        'first-line': 120,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Tu_miRNA/testCtrlNormality.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 114,
        'selection_end': 156,
        'selection_start': 134},
                       loc('Tu_miRNA/test_fdrStats.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 15,
        'selection_end': 57,
        'selection_start': 35},
                       loc('Tu_miRNA/test_pickledSeeds.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 51,
        'selection_end': 93,
        'selection_start': 71},
                       loc('Tu_miRNA/test_seedObj.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 110,
        'selection_end': 152,
        'selection_start': 130},
                       loc('Tu_miRNA/test_seedObjVariations.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 73,
        'selection_end': 115,
        'selection_start': 93},
                       loc('__init__.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 117,
        'selection_start': 0},
                       loc('clusterHyperGeo/clusterHyperGeo.py'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 71,
        'selection_end': 132,
        'selection_start': 71},
                       loc('corePromoterStuff/chromOri2geneOri.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 34,
        'selection_start': 0},
                       loc('corePromoterStuff/count2MotifsConstrainedDist.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 36,
        'selection_end': 71,
        'selection_start': 36},
                       loc('corePromoterStuff/mapAndCountMotif.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 16,
        'selection_end': 51,
        'selection_start': 16},
                       loc('corePromoterStuff/mapAndCount_InrDpe.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 16,
        'selection_end': 51,
        'selection_start': 16},
                       loc('corePromoterStuff/mapAndSlice2Motifs.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 16,
        'selection_end': 51,
        'selection_start': 16},
                       loc('corePromoterStuff/mapCount2ndMotif.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 43,
        'selection_end': 78,
        'selection_start': 43},
                       loc('corePromoterStuff/plotHitsOnAlignedSeqs.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 27,
        'selection_end': 62,
        'selection_start': 27},
                       loc('defs/JamesDefs.py'): {'attrib-starts': [('DotDic'\
        't',
        8)],
        'first-line': 8,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 165,
        'selection_end': 178,
        'selection_start': 178},
                       loc('defs/bioDefs.py'): {'attrib-starts': [('goEnrich'\
        'ment',
        12)],
        'first-line': 7,
        'folded-linenos': [],
        'sel-line': 29,
        'sel-line-start': 831,
        'selection_end': 831,
        'selection_start': 831},
                       loc('defs/doug_hypergeometric.py'): {'attrib-starts': [],
        'first-line': 20,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 20,
        'selection_end': 102,
        'selection_start': 102},
                       loc('defs/fjoin.py'): {'attrib-starts': [],
        'first-line': 21,
        'folded-linenos': [],
        'sel-line': 26,
        'sel-line-start': 820,
        'selection_end': 847,
        'selection_start': 824},
                       loc('defs/mathDefs.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 51,
        'sel-line-start': 1185,
        'selection_end': 1207,
        'selection_start': 1207},
                       loc('defs/miRNA_targeting.py'): {'attrib-starts': [(''\
        'miRNA',
        27),
        ('miRNA.reportGeneTargetsFdrMedMeth',
         584)],
        'first-line': 576,
        'folded-linenos': [],
        'sel-line': 584,
        'sel-line-start': 32370,
        'selection_end': 32405,
        'selection_start': 32378},
                       loc('defs/miRNA_targeting_V05.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('defs/mosqData/seqInfo.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 11,
        'sel-line-start': 847,
        'selection_end': 875,
        'selection_start': 847},
                       loc('defs/nucFreqRepo.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 314,
        'selection_end': 314,
        'selection_start': 314},
                       loc('defs/testingADef.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 36,
        'selection_start': 0},
                       loc('defs/xpermutations.py'): {'attrib-starts': [('xu'\
        'niqueCombinations',
        27)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 28,
        'sel-line-start': 834,
        'selection_end': 834,
        'selection_start': 834},
                       loc('encryptionStuff/RotatingCipher.py'): {'attrib-st'\
        'arts': [('RotatingCipher',
                  0),
                 ('RotatingCipher.DecryptNextChar',
                  28)],
        'first-line': 26,
        'folded-linenos': [],
        'sel-line': 31,
        'sel-line-start': 953,
        'selection_end': 1002,
        'selection_start': 997},
                       loc('gClasses/test_DNAseq.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 229,
        'selection_end': 289,
        'selection_start': 289},
                       loc('microArrayStuff/probeSets2geneVectors.py'): {'at'\
        'trib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 109,
        'selection_end': 129,
        'selection_start': 129},
                       loc('microArrayStuff/testGeneVectorsClass.py'): {'att'\
        'rib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 66,
        'selection_end': 66,
        'selection_start': 66},
                       loc('proteinCoverageByLowerCase.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('revComp_list.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 36,
        'selection_start': 0},
                       loc('testGroupByField.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 36,
        'selection_start': 0},
                       loc('test_SeqMap.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 22,
        'selection_start': 22},
                       loc('timeItScripts/cmpHprGeo_2_psycoHprGeo.py'): {'at'\
        'trib-starts': [],
        'first-line': 16,
        'folded-linenos': [],
        'sel-line': 28,
        'sel-line-start': 610,
        'selection_end': 703,
        'selection_start': 677},
                       loc('timeItScripts/cmpSciPyHprGeo_2_statsDefHprGeo.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 22,
        'sel-line-start': 495,
        'selection_end': 589,
        'selection_start': 589},
                       loc('timeItScripts/compareMotility2TAMO.py'): {'attri'\
        'b-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 382,
        'selection_end': 392,
        'selection_start': 392},
                       loc('usableBoundaryRegions/codingBounds.bak.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 3,
        'sel-line-start': 60,
        'selection_end': 98,
        'selection_start': 60},
                       loc('usableBoundaryRegions/fjoin/testfj'): {'attrib-s'\
        'tarts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 2,
        'sel-line-start': 14,
        'selection_end': 37,
        'selection_start': 14},
                       loc('usableBoundaryRegions/mdosJarFile_RevCompConvert.py'): {''\
        'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 36,
        'selection_start': 0},
                       loc('../setup.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 17,
        'selection_end': 17,
        'selection_start': 17},
                       loc('unknown:<untitled> #6'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #7'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/MD/Meme.py'): (''\
        'project',
        ['']),
                 loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/Sitemap.py'): (''\
        'project',
        ['']),
                 loc('../../../../../../Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/TAMO/paths.py'): (''\
        'project',
        ['']),
                 loc('!simpleScripts/checkJudysDB.py'): ('project',
        ['']),
                 loc('!simpleScripts/gcContentOfFastas.py'): ('project',
        ['']),
                 loc('!simpleScripts/geneList2Fasta.py'): ('project',
        ['']),
                 loc('!simpleScripts/getKmersInAllSeqs.py'): ('project',
        ['']),
                 loc('!simpleScripts/getSeqFrom_sol_sequence_txt.py'): ('pro'\
        'ject',
        ['']),
                 loc('!simpleScripts/higherOrderGenomeOne2OneOrthologies.py'): (''\
        'project',
        ['']),
                 loc('!simpleScripts/interrogatePickles.py'): ('project',
        ['']),
                 loc('!simpleScripts/listOfProbSets2DougsGenes.py'): ('proje'\
        'ct',
        ['']),
                 loc('!simpleScripts/motifHitMatrix4clusterTest.py'): ('proj'\
        'ect',
        ['']),
                 loc('!simpleScripts/parseMegyDBdump.py'): ('project',
        ['']),
                 loc('!simpleScripts/randomSplitFasta.py'): ('project',
        ['']),
                 loc('!simpleScripts/scanSeqs4Motifs.py'): ('project',
        ['']),
                 loc('!simpleScripts/seedHitsFromMDOS.py'): ('project',
        ['']),
                 loc('!simpleScripts/selectFastas_tamo.py'): ('project',
        ['']),
                 loc('!simpleScripts/tabulate_miRNAseeds.py'): ('project',
        ['']),
                 loc('!simpleScripts/testMLE.py'): ('project',
        ['']),
                 loc('!simpleScripts/testOverlapRegEx.py'): ('project',
        ['']),
                 loc('!simpleScripts/testScripts/testBioBlastNCBIXML.py'): (''\
        'project',
        ['']),
                 loc('!simpleScripts/testTAMObackground.py'): ('project',
        ['']),
                 loc('!simpleScripts/timeMeme.py'): ('project',
        ['']),
                 loc('!simpleScripts/tranposeData.py'): ('project',
        ['']),
                 loc('!simpleScripts/whichSeqsHaveEachKmer.py'): ('project',
        ['']),
                 loc('0_prototyping/GEMSlikePWM.py'): ('project',
        ['']),
                 loc('0_prototyping/addRvCmpNumbers4Doug.py'): ('project',
        ['']),
                 loc('0_prototyping/benjHochFDR.py'): ('project',
        ['']),
                 loc('0_prototyping/dev_goClassEnrich.py'): ('project',
        ['']),
                 loc('0_prototyping/dougFastaLooper.py'): ('project',
        ['']),
                 loc('0_prototyping/groupKeysByIntersect.py'): ('project',
        ['']),
                 loc('0_prototyping/testDefOrder.py'): ('project',
        ['']),
                 loc('0_prototyping/test_appendListInLoop_refOrReal.py'): (''\
        'project',
        ['']),
                 loc('0_prototyping/test_setInSetOfSets.py'): ('project',
        ['']),
                 loc('0_prototyping/test_statusBar.py'): ('project',
        ['']),
                 loc('0_prototyping/testingSciPyHypergeo.py'): ('project',
        ['']),
                 loc('0_prototyping/testing_zip.py'): ('project',
        ['']),
                 loc('0_prototyping/timeBinomialFuncs.py'): ('project',
        ['']),
                 loc('BloodFly/BF_BasicSearch.py'): ('project',
        ['']),
                 loc('CRMsTakeTwo/hypergeoPvals4motifPairs.py'): ('project',
        ['']),
                 loc('Collapse3wayOrthoList.py'): ('project',
        ['']),
                 loc('DealingWithTabedFiles/calcCoordsForAaCorePromoter.py'): (''\
        'project',
        ['']),
                 loc('EmptyScript.py'): ('project',
        ['']),
                 loc('FilterLinesOnRegEx.py'): ('project',
        ['']),
                 loc('JamesDefs.py'): ('project',
                                       ['']),
                 loc('LearningTAMO/clusteringMotifs.py'): ('project',
        ['']),
                 loc('LearningTAMO/jasparFiles2TamoFile.py'): ('project',
        ['']),
                 loc('LearningTAMO/jasparFiles2mopatFormat.py'): ('project',
        ['']),
                 loc('LearningTAMO/metaAceMultiCluster.py'): ('project',
        ['']),
                 loc('LearningTAMO/motifToolsSum.py'): ('project',
        ['']),
                 loc('LearningTAMO/playingWithTAMO.py'): ('project',
        ['']),
                 loc('LearningTAMO/randomizing.py'): ('project',
        ['']),
                 loc('LearningTAMO/runMetaAce.py'): ('project',
        ['']),
                 loc('LearningTAMO/runningAlignAce.py'): ('project',
        ['']),
                 loc('LearningTAMO/runningMotifMetrics.py'): ('project',
        ['']),
                 loc('LearningTAMO/tamoMotifs2mopatFormat.py'): ('project',
        ['']),
                 loc('LearningTAMO/testingMDscan.py'): ('project',
        ['']),
                 loc('MDAP_proj/GEMSlikePWM.py'): ('project',
        ['']),
                 loc('MDAP_proj/MDAP.py'): ('project',
        ['']),
                 loc('MDAP_proj/MDAP_defs.py'): ('project',
        ['']),
                 loc('MDAP_proj/MD_wrappers.py'): ('project',
        ['']),
                 loc('MDAP_proj/analyzeFromOneTAMOpickle.py'): ('project',
        ['']),
                 loc('MDAP_proj/analyzeFromTAMOpickles.py'): ('project',
        ['']),
                 loc('MDAP_proj/changing_AlignSimMotifs.py'): ('project',
        ['']),
                 loc('MDAP_proj/combine_a_few_motifs.py'): ('project',
        ['']),
                 loc('MDAP_proj/getRandPromoters.py'): ('project',
        ['']),
                 loc('MDAP_proj/hyperGeoWithListOfIUPACs.py'): ('project',
        ['']),
                 loc('MDAP_proj/hyperGeoWithMotifsFromOutfile.py'): ('projec'\
        't',
        ['']),
                 loc('MDAP_proj/md2tamo.py'): ('project',
        ['']),
                 loc('MDAP_proj/testAlignAce.py'): ('project',
        ['']),
                 loc('MDAP_proj/testBasic.py'): ('project',
        ['']),
                 loc('MDAP_proj/testMeme.py'): ('project',
        ['']),
                 loc('MDAP_proj/test_BasicMulti.py'): ('project',
        ['']),
                 loc('MDAP_proj/test_alignAndCombine.py'): ('project',
        ['']),
                 loc('MDAP_proj/test_findBestPairAlignments.py'): ('project',
        ['']),
                 loc('MDAP_proj/test_loadMotifsFromOutfile.py'): ('project',
        ['']),
                 loc('MDAP_proj/test_shuffleSeqDict.py'): ('project',
        ['']),
                 loc('MDAP_proj/test_transFac2tamo.py'): ('project',
        ['']),
                 loc('MDAP_proj/writeRandClustFiles.py'): ('project',
        ['']),
                 loc('MDOSX_proj/MDOSX_classes.py'): ('project',
        ['']),
                 loc('MDOSX_proj/MDOSX_defs.py'): ('project',
        ['']),
                 loc('MDOSX_proj/test_buildCoRegdOrthoGroups.py'): ('project',
        ['']),
                 loc('MDOSX_proj/test_combineOrthoTabs.py'): ('project',
        ['']),
                 loc('MDOSX_proj/test_combineOrthoTabsJamesDefs.py'): ('proj'\
        'ect',
        ['']),
                 loc('MDOSX_proj/test_orthoSets.py'): ('project',
        ['']),
                 loc('MDOSX_proj/test_searchOrthoGroups.py'): ('project',
        ['']),
                 loc('MDOSX_proj/test_spawnOrthoGroups.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/biggerComboParamsFromMatrix.py'): ('pr'\
        'oject',
        ['']),
                 loc('ModuleDiscovery/buildModulesFromMap.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/calcHyperGeoFromMatrixResults.py'): (''\
        'project',
        ['']),
                 loc('ModuleDiscovery/combosByTableLookUp.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/countMotifsByAgapFromMap.py'): ('proje'\
        'ct',
        ['']),
                 loc('ModuleDiscovery/create_AGAP_v_Motif_Matrix.py'): ('pro'\
        'ject',
        ['']),
                 loc('ModuleDiscovery/cullLargePValFile.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/defs_moduleClusterHyperGeo.py'): ('pro'\
        'ject',
        ['']),
                 loc('ModuleDiscovery/dev_buildMotifPairsForAGAP.py'): ('pro'\
        'ject',
        ['']),
                 loc('ModuleDiscovery/dev_motifPairs_buildModulesFromMap.py'): (''\
        'project',
        ['']),
                 loc('ModuleDiscovery/dev_motifPairs_buildModulesFromMapCombo.py'): (''\
        'project',
        ['']),
                 loc('ModuleDiscovery/moduleByTableLookUp.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/moduleClusterHyperGeo.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/moduleMapDefs.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/motifMap.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/nrListOfMotifsInComboList.py'): ('proj'\
        'ect',
        ['']),
                 loc('ModuleDiscovery/orderMotifPairs.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/sparePartsFromClusterHyperGeo.py'): (''\
        'project',
        ['']),
                 loc('ModuleDiscovery/subtract_MOPAT_headers.py'): ('project',
        ['']),
                 loc('ModuleDiscovery/testModuleCode.py'): ('project',
        ['']),
                 loc('Solexa/extractCountsFromCountFasta.py'): ('project',
        ['']),
                 loc('Solexa/filterCountFastaOnCounts.py'): ('project',
        ['']),
                 loc('Solexa/filterCountFastaOnCountsAndSort.py'): ('project',
        ['']),
                 loc('Solexa/simpleHistogram.py'): ('project',
        ['']),
                 loc('Tu_miRNA/barBoxFromPickles.py'): ('project',
        ['']),
                 loc('Tu_miRNA/boxesOfZsForSeedType.py'): ('project',
        ['']),
                 loc('Tu_miRNA/counts4AllThree.py'): ('project',
        ['']),
                 loc('Tu_miRNA/fastaKmersIn2species.py'): ('project',
        ['']),
                 loc('Tu_miRNA/matchMDOSseeds2Known.py'): ('project',
        ['']),
                 loc('Tu_miRNA/miRNAs2SeedFastas.py'): ('project',
        ['']),
                 loc('Tu_miRNA/miR_geneTargets.py'): ('project',
        ['']),
                 loc('Tu_miRNA/tabulate_miRNAseeds.py'): ('project',
        ['']),
                 loc('Tu_miRNA/targetsIn2species.py'): ('project',
        ['']),
                 loc('Tu_miRNA/test_pickledSeeds.py'): ('project',
        ['']),
                 loc('Tu_miRNA/test_seedObj.py'): ('project',
        ['']),
                 loc('checkProbe2ProbeBlast.py'): ('project',
        ['']),
                 loc('chooseRandomFromList.py'): ('project',
        ['']),
                 loc('clusterDefs2multiFastaFiles.py'): ('project',
        ['']),
                 loc('clusterHyperGeo/clusterHyperGeo.py'): ('project',
        ['']),
                 loc('codingBounds.py'): ('project',
        ['']),
                 loc('collapseMotifsOnRevComp.py'): ('project',
        ['']),
                 loc('convertFastaNames.py'): ('project',
        ['']),
                 loc('corePromoterStuff/chromOri2geneOri.py'): ('project',
        ['']),
                 loc('corePromoterStuff/count2MotifsConstrainedDist.py'): (''\
        'project',
        ['']),
                 loc('corePromoterStuff/mapAndCountMotif.py'): ('project',
        ['']),
                 loc('corePromoterStuff/mapAndCount_InrDpe.py'): ('project',
        ['']),
                 loc('corePromoterStuff/mapAndSlice2Motifs.py'): ('project',
        ['']),
                 loc('corePromoterStuff/mapCount2ndMotif.py'): ('project',
        ['']),
                 loc('corePromoterStuff/nrOnFastaSequence.py'): ('project',
        ['']),
                 loc('corePromoterStuff/plotHitsOnAlignedSeqs.py'): ('projec'\
        't',
        ['']),
                 loc('corePromoterStuff/reOrientOnNewInr.py'): ('project',
        ['']),
                 loc('cullListFileByField.py'): ('project',
        ['']),
                 loc('defs/JamesDefs.py'): ('project',
        ['']),
                 loc('defs/XieDefs.py'): ('project',
        ['']),
                 loc('defs/bioDefs.py'): ('project',
        ['']),
                 loc('defs/crmClasses.py'): ('project',
        ['']),
                 loc('defs/developingDefs.py'): ('project',
        ['']),
                 loc('defs/doug_hypergeometric.py'): ('project',
        ['']),
                 loc('defs/miRNA_targeting.py'): ('project',
        ['']),
                 loc('defs/selectFastas.py'): ('project',
        ['']),
                 loc('defs/seqStats.py'): ('project',
        ['']),
                 loc('defs/testingADef.py'): ('project',
        ['']),
                 loc('encryptionStuff/RotatingCipher.py'): ('project',
        ['']),
                 loc('fjoinConfilctResolver.py'): ('project',
        ['']),
                 loc('fjoinConfilctResolverTesting.py'): ('project',
        ['']),
                 loc('fjoinConfilctResolverV2.py'): ('project',
        ['']),
                 loc('fjoinCtrlr.py'): ('project',
        ['']),
                 loc('gClasses/gSeqClasses.py'): ('project',
        ['']),
                 loc('gClasses/test_DNAseq.py'): ('project',
        ['']),
                 loc('getLineFromList.py'): ('project',
        ['']),
                 loc('list2numberedFasta.py'): ('project',
        ['']),
                 loc('listOflists4doug.py'): ('project',
        ['']),
                 loc('list_comparison.py'): ('project',
        ['']),
                 loc('loadList2DictPlusDougsDefs.py'): ('project',
        ['']),
                 loc('makeJudysDB.py'): ('project',
        ['']),
                 loc('microArrayStuff/checkProbe2ProbeBlast_V2.py'): ('proje'\
        'ct',
        ['']),
                 loc('microArrayStuff/checkProbe2TxsBlast_V2.py'): ('project',
        ['']),
                 loc('microArrayStuff/filterProbeMatchSets.py'): ('project',
        ['']),
                 loc('microArrayStuff/probeSets2geneVectors.py'): ('project',
        ['']),
                 loc('microArrayStuff/testGeneVectorsClass.py'): ('project',
        ['']),
                 loc('nonRedunList.py'): ('project',
        ['']),
                 loc('nonRedunListFirstIndex.py'): ('project',
        ['']),
                 loc('orthologPrep/combineOrthologs.py'): ('project',
        ['']),
                 loc('orthologPrep/combineOrthologs_fromSeedTabs.py'): ('pro'\
        'ject',
        ['']),
                 loc('orthologPrep/testSeqIO.py'): ('project',
        ['']),
                 loc('orthologPrep/testingFastaClass.py'): ('project',
        ['']),
                 loc('randomKmers.py'): ('project',
        ['']),
                 loc('reorderFastaHeader.py'): ('project',
        ['']),
                 loc('revComp_list.py'): ('project',
        ['']),
                 loc('softMask2hardMask.py'): ('project',
        ['']),
                 loc('testGroupByField.py'): ('project',
        ['']),
                 loc('test_SeqMap.py'): ('project',
        ['']),
                 loc('testing.py'): ('project',
                                     ['']),
                 loc('testingReOrderDelimitedList.py'): ('project',
        ['']),
                 loc('timeItScripts/cmpSciPyHprGeo_2_statsDefHprGeo.py'): (''\
        'project',
        ['']),
                 loc('timeItScripts/compareMotility2TAMO.py'): ('project',
        ['']),
                 loc('usableBoudaryRegions/analyzeNs.py'): ('project',
        ['']),
                 loc('usableBoudaryRegions/codingBounds.bak.py'): ('project',
        ['']),
                 loc('usableBoudaryRegions/codingBounds.py'): ('project',
        ['']),
                 loc('usableBoudaryRegions/fjoinConfilctResolverV2.py'): ('p'\
        'roject',
        ['']),
                 loc('usableBoudaryRegions/fjoinCtrlr.py'): ('project',
        ['']),
                 loc('usableBoudaryRegions/mdosJarFile_RevCompConvert.py'): (''\
        'project',
        ['']),
                 loc('usableBoudaryRegions/recombineCoords.py'): ('project',
        ['']),
                 loc('usableBoundaryRegions/addStpCdnForTuSeqs.py'): ('proje'\
        'ct',
        ['']),
                 loc('usableBoundaryRegions/analyzeNs.py'): ('project',
        ['']),
                 loc('usableBoundaryRegions/codingBounds.py'): ('project',
        ['']),
                 loc('usableBoundaryRegions/fjoinConfilctResolverV2.py'): (''\
        'project',
        ['']),
                 loc('usableBoundaryRegions/fjoinCtrlr.py'): ('project',
        ['']),
                 loc('usableBoundaryRegions/recombineCoords.py'): ('project',
        [''])}
proj.pypath = {None: ('custom',
                      '/Users/biggus/Documents/Programming/WingProjects/Jame'\
                      'sProject_REPO/defs:/Users/biggus/Documents/Programmin'\
                      'g/WingProjects/JamesProject_REPO/gClasses:/sw/lib/pyt'\
                      'hon2.5/site-packages/:/Library/Frameworks/Python.fram'\
                      'ework/Versions/2.5/lib/python2.5/site-packages/:/User'\
                      's/biggus/Documents/Programming/WingProjects/JamesProj'\
                      'ect_REPO/MDAP_proj')}
search.replace-history = [u'std',
                          u'psy',
                          u'from gusPyCode.gClasses.gSeqClasses',
                          u'from gusPyCode.defs.crmClasses import',
                          u'from gusPyCode.defs.bioDefs import',
                          u'from gusPyCode.microArrayStuff.defs_microArray',
                          u'from gusPyCode.defs import miRNA_targeting',
                          u'from gusPyCode.defs.JamesDefs import',
                          u'from gusPyCode.MDAP_proj.MDAP_defs',
                          u'from gusPyCode.defs.doug_hypergeometric import binc',
                          u'from gusPyCode.defs.doug_hypergeometric import hyperGeoPvalue',
                          u'from gusPyCode.defs.fjoin import FJoin',
                          u'_seedModels',
                          u'miRNA_seq',
                          u'_buildMatchVersions',
                          u'matchVersions',
                          u'seedVersions',
                          u'blastObjs',
                          u'similarMotifs',
                          u'_buildMotifSets']
search.search-history = [u'filter fasta',
                         u'filterfasta',
                         u'filter',
                         u'Aa_2000bpUp_hardMasked_shuf3',
                         u'promoterSeqPaths',
                         u'motif1',
                         u'matchCounts',
                         u'sci',
                         u'gus',
                         u'Dec',
                         u' bino',
                         u' bin',
                         u'bin',
                         u'hyper',
                         u'from gSeqClasses',
                         u'gSeqClasses',
                         u'g',
                         u'crmClasses',
                         u'crmClass',
                         u'cr']
